<!DOCTYPE html>
<html lang="id">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>NirKyy - REST API Documentation</title>
  <meta name="description" content="Nirkyy - Kumpulan API gratis dan modern untuk kebutuhan bot WhatsApp, Telegram, dan Web.">
  <meta name="keywords" content="REST API, dokumentasi API, free API, NirKyy, endpoint, API documentation, web API, fetch API, modern API, aesthetic API">
  <meta name="author" content="NirKyy Developer">
  <meta name="robots" content="index, follow">
  <meta http-equiv="Content-Security-Policy" content="upgrade-insecure-requests">

  <meta property="og:title" content="NirKyy - Modern REST API Documentation">
  <meta property="og:description" content="Nirkyy - Kumpulan API gratis dan modern untuk kebutuhan bot WhatsApp, Telegram, dan Web.">
  <meta property="og:type" content="website">
  <meta property="og:url" content="nirkyy.koyeb.app">
  <meta property="og:image" content="/favicon.ico">

  <meta name="twitter:card" content="summary_large_image">
  <meta name="twitter:title" content="NirKyy - Modern REST API Documentation">
  <meta name="twitter:description" content="Nirkyy - Kumpulan API gratis dan modern untuk kebutuhan bot WhatsApp, Telegram, dan Web.">
  <meta name="twitter:site" content="@NirKyyDev">
  <meta name="twitter:image" content="/favicon.ico">

  <link rel="icon" href="/favicon.ico" type="image/x-icon">
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" integrity="sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIftl+Vegovlnee1c9QX4TctnWMn13TZye+giMm8e2LwA==" crossorigin="anonymous" referrerpolicy="no-referrer" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">

  <style>
    :root {
      --bg-dark: #121212;
      --bg-light: #1e1e1e;
      --text-primary: #e0e0e0;
      --text-secondary: #b0b0b0;
      --accent-primary: #6c63ff;
      --accent-secondary: #8a83ff;
      --border-color: #333;
      --success-color: #28a745;
      --error-color: #dc3545;
      --font-family: 'Poppins', sans-serif;
      --border-radius: 8px;
    }

    ::selection {
      background-color: var(--accent-primary);
      color: var(--bg-dark);
    }

    body {
      font-family: var(--font-family);
      background-color: var(--bg-dark);
      color: var(--text-primary);
      margin: 0;
      padding: 0;
      overflow-x: hidden;
      font-size: 16px;
      line-height: 1.6;
    }

    .btn {
        border-radius: var(--border-radius);
        font-weight: 500;
        transition: all 0.3s ease;
        padding: 0.5rem 1rem;
    }

    .btn-primary {
        background-color: var(--accent-primary);
        border-color: var(--accent-primary);
        color: #fff;
    }
    .btn-primary:hover, .btn-primary:focus {
        background-color: var(--accent-secondary);
        border-color: var(--accent-secondary);
        box-shadow: 0 0 10px rgba(108, 99, 255, 0.4);
    }

    .btn-outline-primary {
        color: var(--accent-primary);
        border-color: var(--accent-primary);
    }
    .btn-outline-primary:hover, .btn-outline-primary:focus {
        background-color: var(--accent-primary);
        color: #fff;
        box-shadow: 0 0 10px rgba(108, 99, 255, 0.4);
    }

    .btn-secondary {
        background-color: var(--bg-light);
        border-color: var(--border-color);
        color: var(--text-secondary);
    }
    .btn-secondary:hover, .btn-secondary:focus {
        background-color: #2a2a2a;
        border-color: #444;
        color: var(--text-primary);
    }

    .btn-sm {
        padding: 0.3rem 0.8rem;
        font-size: 0.875rem;
    }

    .btn-copy-feedback {
        background-color: var(--success-color) !important;
        border-color: var(--success-color) !important;
        color: #fff !important;
    }

    header {
      background-color: var(--bg-light);
      padding: 15px 30px;
      border-bottom: 1px solid var(--border-color);
      display: flex;
      align-items: center;
      justify-content: space-between;
      flex-wrap: wrap;
      position: sticky;
      top: 0;
      z-index: 1030;
    }

    .header-left {
      display: flex;
      align-items: center;
      gap: 15px;
    }
    .header-left img {
      max-height: 55px;
      border-radius: 50%;
    }
    .header-title {
      font-size: 1.75rem;
      font-weight: 600;
      margin: 0;
      color: var(--text-primary);
    }

    main.container-fluid {
      padding: 30px 40px;
    }

    .search-container {
      margin-bottom: 30px;
      position: relative;
    }
    .search-container .form-control {
      padding: 12px 20px 12px 45px;
      border: 1px solid var(--border-color);
      background-color: var(--bg-light);
      color: var(--text-primary);
      border-radius: var(--border-radius);
      font-size: 1rem;
      transition: border-color .3s ease, box-shadow .3s ease;
    }
    .search-container .form-control:focus {
      border-color: var(--accent-primary);
      box-shadow: 0 0 0 0.25rem rgba(108, 99, 255, 0.25);
      background-color: var(--bg-light);
      color: var(--text-primary);
      outline: 0;
    }
    .search-icon {
      position: absolute;
      left: 15px;
      top: 50%;
      transform: translateY(-50%);
      color: var(--text-secondary);
      font-size: 1.1rem;
    }

    .dropdown-menu {
      background-color: var(--bg-light);
      border: 1px solid var(--border-color);
      border-radius: var(--border-radius);
      padding: 0.5rem 0;
      box-shadow: 0 5px 15px rgba(0,0,0,0.2);
    }
    .dropdown-item {
      color: var(--text-secondary);
      padding: 0.5rem 1.5rem;
      font-weight: 400;
      transition: background-color 0.2s ease, color 0.2s ease;
    }
    .dropdown-item:hover, .dropdown-item:focus {
      background-color: var(--accent-primary);
      color: #fff;
    }
    .dropdown-toggle {
        background-color: var(--bg-light);
        color: var(--text-primary);
        border: 1px solid var(--border-color);
    }
    .dropdown-toggle::after {
        margin-left: 0.5em;
    }

    #endpointListSection .card {
      background-color: var(--bg-light);
      color: var(--text-primary);
      border: 1px solid var(--border-color);
      border-radius: var(--border-radius);
      transition: transform .3s ease, box-shadow .3s ease, border-color .3s ease;
      margin-bottom: 25px;
      overflow: hidden;
    }
    #endpointListSection .card:hover {
      transform: translateY(-5px);
      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
      border-color: var(--accent-primary);
    }

    .card-header {
      background-color: rgba(108, 99, 255, 0.1);
      color: var(--accent-primary);
      font-weight: 600;
      font-size: 1.1rem;
      padding: 1rem 1.5rem;
      border-bottom: 1px solid var(--border-color);
    }

    .card-body {
      padding: 1.5rem;
    }

    .endpoint-path {
      font-family: 'Courier New', Courier, monospace;
      background-color: var(--bg-dark);
      padding: 0.75rem 1rem;
      border-radius: var(--border-radius);
      border: 1px solid var(--border-color);
      margin-bottom: 1rem;
      word-break: break-all;
      font-size: 0.9em;
      color: var(--text-secondary);
      display: flex;
      align-items: center;
      justify-content: space-between;
    }

    .badge {
      background-color: var(--accent-primary);
      color: #fff;
      font-weight: 500;
      padding: 0.4em 0.8em;
      border-radius: var(--border-radius);
      font-size: 0.8rem;
    }

    pre {
      white-space: pre-wrap;
      word-wrap: break-word;
      background-color: var(--bg-dark);
      border: 1px solid var(--border-color);
      padding: 15px;
      border-radius: var(--border-radius);
      overflow-x: auto;
      color: var(--text-primary);
      font-family: 'Courier New', Courier, monospace;
      font-size: 0.9em;
      max-height: 400px;
    }

    .modal {
        --bs-modal-bg: var(--bg-light);
        --bs-modal-color: var(--text-primary);
        --bs-modal-border-color: var(--border-color);
        --bs-modal-header-border-color: var(--border-color);
        --bs-modal-footer-border-color: var(--border-color);
    }
    .modal-header .btn-close {
        filter: invert(1) grayscale(100%) brightness(200%);
    }
    .modal-title {
      color: var(--accent-primary);
      font-weight: 600;
    }
    .modal-content {
        border-radius: var(--border-radius);
        border: 1px solid var(--border-color);
    }
    .modal-body label {
        font-weight: 500;
        margin-bottom: 0.5rem;
        color: var(--text-secondary);
    }
    .modal-body .form-control {
        background-color: var(--bg-dark);
        border: 1px solid var(--border-color);
        color: var(--text-primary);
        border-radius: var(--border-radius);
    }
    .modal-body .form-control:focus {
        background-color: var(--bg-dark);
        color: var(--text-primary);
        border-color: var(--accent-primary);
        box-shadow: 0 0 0 0.25rem rgba(108, 99, 255, 0.25);
    }

    #apiResponse h5, #axiosExample h5 {
        color: var(--accent-secondary);
        font-weight: 500;
        margin-top: 1rem;
        margin-bottom: 0.5rem;
        font-size: 1rem;
    }

    .response-area {
        position: relative;
    }
    .btn-copy {
        position: absolute;
        right: 10px;
        top: 10px;
        z-index: 10;
        background: rgba(255,255,255,0.1);
        border: none;
        color: var(--text-secondary);
        padding: 2px 6px;
        font-size: 0.8em;
        border-radius: 4px;
        opacity: 0.7;
        transition: opacity 0.2s ease, background 0.2s ease;
    }
    .btn-copy:hover {
        opacity: 1;
        background: rgba(255,255,255,0.2);
    }

    footer {
      text-align: center;
      padding: 30px 20px;
      background-color: var(--bg-light);
      color: var(--text-secondary);
      border-top: 1px solid var(--border-color);
      margin-top: 40px;
      font-size: 0.9rem;
    }
    footer a {
      color: var(--accent-primary);
      text-decoration: none;
      font-weight: 500;
    }
    footer a:hover {
      color: var(--accent-secondary);
      text-decoration: underline;
    }

    .loading {
      text-align: center;
      margin: 30px auto;
      color: var(--accent-primary);
    }
    .spinner-border {
        width: 3rem;
        height: 3rem;
        color: var(--accent-primary);
    }
    .loading-text {
        margin-top: 10px;
        font-style: italic;
        color: var(--text-secondary);
    }

    #responseBodyContainer img, #responseBodyContainer video, #responseBodyContainer audio {
        max-width: 100%;
        height: auto;
        display: block;
        margin-top: 10px;
        border-radius: var(--border-radius);
        background-color: var(--bg-dark);
    }
    #responseBodyContainer audio {
        width: 100%;
    }
     #responseBodyContainer pre {
        margin-top: 0; /* Remove default margin if pre is direct child */
     }


    .text-accent {
        color: var(--accent-primary);
    }

    @media (max-width: 768px) {
      header {
        padding: 15px;
        text-align: center;
      }
      .header-left {
          justify-content: center;
          margin-bottom: 10px;
          width: 100%;
      }
      .header-title {
        font-size: 1.5rem;
      }
       .dropdown {
          width: 100%;
          text-align: center;
      }
      .dropdown-toggle {
          width: 80%;
      }
      main.container-fluid {
        padding: 20px;
      }
      .search-container .form-control {
          font-size: 0.9rem;
      }
      .card-header {
          font-size: 1rem;
      }
      .card-body {
          padding: 1rem;
      }
      .endpoint-path {
          font-size: 0.8em;
      }
    }
     @media (max-width: 576px) {
        .endpoint-path {
            flex-direction: column;
            align-items: flex-start;
        }
        .endpoint-path .btn-group {
            margin-top: 10px;
            width: 100%;
            display: flex;
            justify-content: space-between;
        }
         .endpoint-path .btn-group .btn {
             flex-grow: 1;
             margin: 0 2px;
         }
     }

  </style>
</head>
<body>
  <header>
    <div class="header-left">
      <img src="/favicon.ico" alt="Logo NirKyy">
      <h1 class="header-title">NirKyy API</h1>
    </div>
    <div class="dropdown">
      <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownTags" data-bs-toggle="dropdown" aria-expanded="false">
        <i class="fas fa-tags me-2"></i>Filter by Tag
      </button>
      <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="dropdownTags" id="tagButtons">
         <li><a class="dropdown-item" href="#" data-tags="">All Tags</a></li>
         <li><hr class="dropdown-divider" style="border-top: 1px solid var(--border-color);"></li>
         <li><span class="dropdown-item disabled text-muted"><small>Loading tags...</small></span></li>
      </ul>
    </div>
  </header>

  <main class="container-fluid">
    <div class="search-container">
      <i class="fas fa-search search-icon"></i>
      <input type="text" id="searchEndpoint" class="form-control" placeholder="Cari berdasarkan nama, path, atau tag...">
    </div>
    <div id="endpointListSection">
         <div class="loading">
             <div class="spinner-border" role="status">
                 <span class="visually-hidden">Loading...</span>
             </div>
             <p class="loading-text">Memuat daftar endpoint...</p>
         </div>
    </div>
  </main>

  <footer>
    <p>© 2025 NirKyy. Tetap semangat, API tetap aktif selama Koyeb gratis! 🚀</p>
    <p>Bergabunglah di <a href="https://whatsapp.com/channel/0029Vb3qLJRDuMRdjacRwe2T" target="_blank" rel="noopener noreferrer"><i class="fab fa-whatsapp"></i> Saluran WhatsApp</a> untuk update terbaru.</p>
  </footer>

  <div class="modal fade" id="tryModal" tabindex="-1" aria-labelledby="tryModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="tryModalLabel"><i class="fas fa-vial me-2"></i>Coba Endpoint</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <div id="parameterInputs" class="mb-4">
          </div>
          <button id="runButton" class="btn btn-primary btn-lg w-100 mb-3">
            <i class="fas fa-play me-2"></i> Jalankan Permintaan
          </button>
          <div id="loadingIndicator" class="loading" style="display:none;">
            <div class="spinner-border spinner-border-sm" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <span class="ms-2">Memproses...</span>
          </div>

          <div id="resultUrl" class="mt-3" style="display: none;">
              <h5>URL Permintaan:</h5>
              <div class="response-area">
                   <button class="btn-copy" data-clipboard-target="#finalUrlText" title="Salin URL">
                       <i class="far fa-copy"></i>
                   </button>
                   <pre><code id="finalUrlText"></code></pre>
              </div>
          </div>

          <div id="apiResponse" class="mt-3" style="display: none;">
            <div class="response-area">
                <h5>Response Header:</h5>
                <button class="btn-copy" data-clipboard-target="#responseHeader" title="Salin Header">
                    <i class="far fa-copy"></i>
                </button>
                <pre id="responseHeader"></pre>
            </div>
            <div class="response-area mt-3">
                <h5>Response Body:</h5>
                <button class="btn-copy btn-copy-body" data-clipboard-target="#responseBodyContainer pre" title="Salin Body" style="display: none;">
                     <i class="far fa-copy"></i>
                 </button>
                <div id="responseBodyContainer" class="p-0"></div>
            </div>
          </div>

          <div id="axiosExample" class="mt-4" style="display: none;">
              <h5>Contoh Kode Axios (GET):</h5>
              <div class="response-area">
                   <button class="btn-copy" data-clipboard-target="#axiosSnippet code" title="Salin Kode">
                       <i class="far fa-copy"></i>
                   </button>
                  <pre id="axiosSnippet"><code></code></pre>
              </div>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Tutup</button>
        </div>
      </div>
    </div>
  </div>

  <div class="modal fade" id="whatsappModal" tabindex="-1" aria-labelledby="whatsappModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header border-0">
          <h5 class="modal-title" id="whatsappModalLabel"><i class="fab fa-whatsapp me-2 text-success"></i> Gabung Saluran WhatsApp Kami!</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <p style="font-size: 1.05rem;" class="text-secondary">Dapatkan update API terbaru, info menarik, dan diskusi seru seputar NirKyy langsung di WhatsApp Anda.</p>
        </div>
        <div class="modal-footer border-0 justify-content-center">
          <a href="https://whatsapp.com/channel/0029Vb3qLJRDuMRdjacRwe2T" target="_blank" rel="noopener noreferrer" class="btn btn-success"><i class="fab fa-whatsapp me-2"></i> Gabung Sekarang</a>
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Nanti Saja</button>
        </div>
      </div>
    </div>
  </div>

  <audio id="successSound" src="/success.mp3" preload="auto"></audio>
  <audio id="errorSound" src="/error.mp3" preload="auto"></audio>

  <script src="https://code.jquery.com/jquery-3.7.1.min.js" integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/clipboard.js/2.0.11/clipboard.min.js"></script>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
        let finalApiUrl = '';
        let isFetching = false;
        const endpointListSection = document.getElementById('endpointListSection');
        const searchEndpointInput = document.getElementById('searchEndpoint');
        const tagButtonsContainer = document.getElementById('tagButtons');
        const tryModalElement = document.getElementById('tryModal');
        const tryModal = new bootstrap.Modal(tryModalElement);
        const parameterInputsDiv = document.getElementById('parameterInputs');
        const runButton = document.getElementById('runButton');
        const responseHeaderPre = document.getElementById('responseHeader');
        const responseBodyContainer = document.getElementById('responseBodyContainer');
        const axiosSnippetPre = document.getElementById('axiosSnippet').querySelector('code');
        const loadingIndicator = document.getElementById('loadingIndicator');
        const successSound = document.getElementById('successSound');
        const errorSound = document.getElementById('errorSound');
        const apiResponseDiv = document.getElementById('apiResponse');
        const axiosExampleDiv = document.getElementById('axiosExample');
        const resultUrlDiv = document.getElementById('resultUrl');
        const finalUrlTextCode = document.getElementById('finalUrlText');
        const copyResponseBodyBtn = document.querySelector('.btn-copy-body');

        let currentEndpointData = null;
        let clipboard;

        clipboard = new ClipboardJS('.btn-copy');
        clipboard.on('success', function(e) {
            const originalText = e.trigger.innerHTML;
            e.trigger.innerHTML = '<i class="fas fa-check"></i> Disalin!';
            e.trigger.classList.add('btn-copy-feedback');
            setTimeout(() => {
                e.trigger.innerHTML = originalText;
                e.trigger.classList.remove('btn-copy-feedback');
            }, 1500);
            e.clearSelection();
        });
        clipboard.on('error', function(e) {
            const originalText = e.trigger.getAttribute('title');
            e.trigger.setAttribute('title', 'Gagal menyalin');
            setTimeout(() => {
                 e.trigger.setAttribute('title', originalText);
            }, 1500);
        });

        const whatsappModalElement = document.getElementById('whatsappModal');
        const whatsappModal = new bootstrap.Modal(whatsappModalElement);
        setTimeout(() => {
             whatsappModal.show();
        }, 2000);

        function debounce(func, wait) {
            let timeout;
            return function(...args) {
                clearTimeout(timeout);
                timeout = setTimeout(() => func.apply(this, args), wait);
            };
        }

        function attachCardEvents() {
             endpointListSection.addEventListener('click', function(e) {
                 const tryButton = e.target.closest('.try-button');
                 if (tryButton) {
                     const data = tryButton.getAttribute('data-endpoint');
                     if (data) {
                         try {
                            const endpoint = JSON.parse(data);
                            openTryModal(endpoint);
                         } catch(parseError) {
                             console.error("Failed to parse endpoint data:", parseError);
                             alert("Error: Data endpoint tidak valid.");
                         }
                     }
                 }
             });
         }

        function openTryModal(endpoint) {
            currentEndpointData = endpoint;
            parameterInputsDiv.innerHTML = '';
            resetModalOutput();
            document.getElementById('tryModalLabel').innerHTML = `<i class="fas fa-vial me-2"></i>Coba: ${endpoint.nama}`;

            if (endpoint.parameter && endpoint.parameter.length > 0) {
                parameterInputsDiv.innerHTML += `<h6 class="text-secondary mb-3">Parameter Permintaan</h6>`;
                endpoint.parameter.forEach(param => {
                    const paramName = param.params;
                    const defaultValue = param.example || '';
                    const isRequired = (param.opsional === false);
                    const inputId = `param-${paramName}`;

                    const div = document.createElement('div');
                    div.className = 'mb-3';

                    const label = document.createElement('label');
                    label.htmlFor = inputId;
                    label.className = 'form-label';
                    label.textContent = `${paramName} ${isRequired ? '*' : ''}`;

                    const input = document.createElement('input');
                    input.type = 'text';
                    input.className = 'form-control';
                    input.id = inputId;
                    input.name = paramName;
                    input.placeholder = param.deskripsi || (defaultValue ? `Contoh: ${defaultValue}` : `Masukkan ${paramName}`);
                    input.value = defaultValue;
                    if (isRequired) input.required = true;

                    div.appendChild(label);
                    div.appendChild(input);
                    parameterInputsDiv.appendChild(div);
                });
            } else {
                 parameterInputsDiv.innerHTML = `<p class="text-secondary fst-italic">Endpoint ini tidak memerlukan parameter tambahan.</p>`;
            }
            tryModal.show();
        }

        function resetModalOutput() {
            responseHeaderPre.textContent = '';
            responseBodyContainer.innerHTML = '';
            axiosSnippetPre.textContent = '';
            finalUrlTextCode.textContent = '';
            apiResponseDiv.style.display = 'none';
            axiosExampleDiv.style.display = 'none';
            resultUrlDiv.style.display = 'none';
            if(copyResponseBodyBtn) copyResponseBodyBtn.style.display = 'none';
            finalApiUrl = '';
            // Clean up any existing blob URLs from previous responses
            const mediaElements = responseBodyContainer.querySelectorAll('img[src^="blob:"], video[src^="blob:"], audio[src^="blob:"]');
            mediaElements.forEach(el => {
                if (el.src) URL.revokeObjectURL(el.src);
            });
            const downloadLinks = responseBodyContainer.querySelectorAll('a[href^="blob:"]');
            downloadLinks.forEach(a => {
                if (a.href) URL.revokeObjectURL(a.href);
            });
        }

        tryModalElement.addEventListener('hidden.bs.modal', function () {
             if (loadingIndicator.style.display !== 'block') {
                 resetModalOutput();
                 currentEndpointData = null;
                 runButton.disabled = false;
             }
        });

        runButton.addEventListener('click', function() {
            if (loadingIndicator.style.display === 'block' || !currentEndpointData) return;

            runButton.disabled = true;
            loadingIndicator.style.display = 'block';
            resetModalOutput();

            let apiUrl = currentEndpointData.endpoint;
            const queryParams = {};
            let missingRequired = false;
            let firstMissingField = null;

            const inputs = parameterInputsDiv.querySelectorAll('input[name]');
            inputs.forEach(input => {
                const paramName = input.name;
                const paramDefinition = currentEndpointData.parameter.find(p => p.params === paramName);
                const isRequired = paramDefinition && (paramDefinition.opsional === false);
                const inputValue = input.value.trim();

                if (isRequired && !inputValue) {
                    missingRequired = true;
                    if (!firstMissingField) firstMissingField = input;
                    input.classList.add('is-invalid');
                } else {
                     input.classList.remove('is-invalid');
                }

                 if (inputValue) {
                    const placeholder = `{${paramName}}`;
                     if (apiUrl.includes(placeholder)) {
                        apiUrl = apiUrl.replace(placeholder, encodeURIComponent(inputValue));
                    } else {
                         queryParams[paramName] = inputValue;
                    }
                 }
            });

            if (missingRequired) {
                alert('Harap isi semua parameter yang ditandai wajib (*).');
                if (firstMissingField) firstMissingField.focus();
                runButton.disabled = false;
                loadingIndicator.style.display = 'none';
                return;
            }

            const baseUrl = `https://nirkyy.koyeb.app${apiUrl}`;
            const urlObj = new URL(baseUrl);
            Object.entries(queryParams).forEach(([key, value]) => {
                urlObj.searchParams.append(key, value);
            });
            finalApiUrl = urlObj.href;

            finalUrlTextCode.textContent = finalApiUrl;
            resultUrlDiv.style.display = 'block';

            const potentialBinary = /\.(jpg|jpeg|png|gif|webp|mp4|webm|mp3|ogg|wav|pdf|zip)$/i.test(finalApiUrl);
            const axiosConfig = {
                method: 'get',
                url: finalApiUrl,
                responseType: 'arraybuffer',
                validateStatus: function (status) {
                     return status >= 200 && status < 500;
                }
            };


            axios(axiosConfig)
            .then(response => {
                const headers = response.headers;
                const contentType = headers['content-type'] || '';
                const status = response.status;

                let headerString = `Status: ${status} ${response.statusText}\n`;
                Object.entries(headers).forEach(([key, value]) => {
                    headerString += `${key}: ${value}\n`;
                });
                responseHeaderPre.textContent = headerString.trim();
                apiResponseDiv.style.display = 'block';

                responseBodyContainer.innerHTML = '';
                if(copyResponseBodyBtn) copyResponseBodyBtn.style.display = 'none';

                const decoder = new TextDecoder('utf-8');
                let responseText = '';
                let isJson = false;
                try {
                    responseText = decoder.decode(new Uint8Array(response.data));
                    if (contentType.includes('application/json')) {
                        JSON.parse(responseText); // Validate JSON structure
                        isJson = true;
                    }
                } catch (e) {
                   isJson = false;
                }

                if (isJson) {
                     const pre = document.createElement('pre');
                     pre.textContent = JSON.stringify(JSON.parse(responseText), null, 2);
                     responseBodyContainer.appendChild(pre);
                     if(copyResponseBodyBtn) copyResponseBodyBtn.style.display = 'block';
                } else if (contentType.startsWith('image/')) {
                     const blob = new Blob([response.data], { type: contentType });
                     const imageUrl = URL.createObjectURL(blob);
                     const img = document.createElement('img');
                     img.src = imageUrl;
                     img.alt = "API Response Image";
                     responseBodyContainer.appendChild(img);
                } else if (contentType.startsWith('video/')) {
                    const blob = new Blob([response.data], { type: contentType });
                    const videoUrl = URL.createObjectURL(blob);
                    const video = document.createElement('video');
                    video.src = videoUrl;
                    video.controls = true;
                    responseBodyContainer.appendChild(video);
                } else if (contentType.startsWith('audio/')) {
                    const blob = new Blob([response.data], { type:contentType });
                    const audioUrl = URL.createObjectURL(blob);
                    const audio = document.createElement('audio');
                    audio.src = audioUrl;
                    audio.controls = true;
                    responseBodyContainer.appendChild(audio);
                 } else if (contentType.startsWith('text/')) {
                     const pre = document.createElement('pre');
                     pre.textContent = responseText;
                     responseBodyContainer.appendChild(pre);
                     if(copyResponseBodyBtn) copyResponseBodyBtn.style.display = 'block';
                 } else {
                    const pre = document.createElement('pre');
                    pre.textContent = `[${contentType} - ${response.data.byteLength} bytes received]`;
                    responseBodyContainer.appendChild(pre);
                    try {
                        const blob = new Blob([response.data], { type: contentType });
                        const downloadUrl = URL.createObjectURL(blob);
                        const a = document.createElement('a');
                        a.href = downloadUrl;
                        const disposition = headers['content-disposition'];
                        let filename = 'download';
                         if (disposition && disposition.indexOf('attachment') !== -1) {
                            const filenameRegex = /filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/;
                            const matches = filenameRegex.exec(disposition);
                            if (matches != null && matches[1]) {
                                filename = matches[1].replace(/['"]/g, '');
                             }
                         } else {
                            const pathParts = new URL(finalApiUrl).pathname.split('/');
                             filename = pathParts[pathParts.length - 1] || 'download';
                             if (!filename.includes('.')) {
                                 const extMatch = contentType.split('/')[1];
                                 if(extMatch) filename += `.${extMatch.split('+')[0]}`; // Basic extension guess
                                 else filename += '.bin';
                             }
                         }
                         a.download = filename;
                         a.textContent = `Unduh File (${filename})`;
                         a.className = 'btn btn-sm btn-outline-primary mt-2 d-block'; // Make block for better layout
                         responseBodyContainer.appendChild(a);
                    } catch (blobError) {
                         console.error("Error creating download link:", blobError);
                         const errorP = document.createElement('p');
                         errorP.textContent = "(Tidak dapat membuat tautan unduhan)";
                         errorP.className = 'text-danger fst-italic mt-1';
                         responseBodyContainer.appendChild(errorP);
                    }
                 }

                 if (status >= 200 && status < 300) {
                    let playSuccess = true;
                     if (isJson) {
                         try {
                             const jsonData = JSON.parse(responseText);
                             if (jsonData && jsonData.success === false) {
                                 playSuccess = false;
                             }
                         } catch (e) { }
                     }
                     if(playSuccess) successSound.play(); else errorSound.play();
                 } else {
                     errorSound.play();
                 }


                const axiosResponseType = (!isJson && (contentType.startsWith('image/') || contentType.startsWith('video/') || contentType.startsWith('audio/') || !contentType.startsWith('text/'))) ? ",\n  responseType: 'arraybuffer'" : "";
                let axiosCode = `axios.get('${baseUrl}', {\n`;
                if (Object.keys(queryParams).length > 0) {
                     axiosCode += `  params: ${JSON.stringify(queryParams, null, 2)}`;
                     if(axiosResponseType) axiosCode += axiosResponseType;
                     axiosCode += `\n`;
                } else if (axiosResponseType) {
                     axiosCode += `  responseType: 'arraybuffer'\n`;
                }
                 axiosCode += `})\n.then(response => {\n  console.log('Status:', response.status);\n  console.log('Headers:', response.headers);\n  console.log('Data:', response.data);\n})\n.catch(error => {\n  console.error('Error fetching data:', error);\n});`;

                axiosSnippetPre.textContent = axiosCode;
                axiosExampleDiv.style.display = 'block';

            })
            .catch(error => {
                errorSound.play();
                console.error('Axios request failed:', error);
                apiResponseDiv.style.display = 'block';
                 responseHeaderPre.textContent = `Error: ${error.message}`;
                 responseBodyContainer.innerHTML = '';
                 if(copyResponseBodyBtn) copyResponseBodyBtn.style.display = 'none';

                 if (error.response) {
                    let headerString = `Status: ${error.response.status} ${error.response.statusText}\n`;
                    Object.entries(error.response.headers).forEach(([key, value]) => { headerString += `${key}: ${value}\n`; });
                    responseHeaderPre.textContent = headerString.trim();

                    if (error.response.data) {
                        const pre = document.createElement('pre');
                        try {
                             const decoder = new TextDecoder('utf-8');
                             const errorText = decoder.decode(new Uint8Array(error.response.data));
                             try {
                                 pre.textContent = JSON.stringify(JSON.parse(errorText), null, 2);
                                 if(copyResponseBodyBtn) copyResponseBodyBtn.style.display = 'block';
                             } catch (jsonError) {
                                 pre.textContent = errorText;
                                 if(copyResponseBodyBtn) copyResponseBodyBtn.style.display = 'block';
                             }
                         } catch (decodeError) {
                              pre.textContent = `[Binary error data received - ${error.response.data.byteLength} bytes]`;
                          }
                           responseBodyContainer.appendChild(pre);
                    } else {
                         const p = document.createElement('p');
                         p.textContent = '(No response body)';
                         p.className = 'fst-italic text-secondary';
                         responseBodyContainer.appendChild(p);
                     }

                 } else if (error.request) {
                     const p = document.createElement('p');
                     p.textContent = 'Tidak ada respons diterima dari server. Periksa koneksi atau URL.';
                     p.className = 'text-danger';
                     responseBodyContainer.appendChild(p);
                } else {
                     const p = document.createElement('p');
                     p.textContent = `Error konfigurasi permintaan: ${error.message}`;
                     p.className = 'text-danger';
                     responseBodyContainer.appendChild(p);
                }
            })
            .finally(() => {
                loadingIndicator.style.display = 'none';
                runButton.disabled = false;
            });
        });


        function fetchData(url) {
             if (isFetching) return;
             isFetching = true;
             endpointListSection.innerHTML = `
                 <div class="loading">
                     <div class="spinner-border" role="status">
                         <span class="visually-hidden">Loading...</span>
                     </div>
                     <p class="loading-text">Memuat...</p>
                 </div>`;

             fetch(url)
                .then(response => {
                     if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                     return response.text();
                 })
                .then(html => {
                     endpointListSection.innerHTML = html;
                     if (html.trim() === '' || html.includes("Tidak ada endpoint")) {
                         endpointListSection.innerHTML = `<p class="text-center text-secondary fst-italic mt-4">Tidak ada endpoint yang cocok ditemukan.</p>`;
                     }
                 })
                .catch(error => {
                     console.error('Fetch error:', error);
                     endpointListSection.innerHTML = `<p class="text-center text-danger mt-4">Gagal memuat endpoint. Coba lagi nanti.</p>`;
                 })
                .finally(() => {
                     isFetching = false;
                 });
         }

         const debouncedSearch = debounce(function() {
             const searchTerm = searchEndpointInput.value.trim();
             const url = searchTerm
                ? `/search?term=${encodeURIComponent(searchTerm)}`
                : '/renderpage?tags=';
             fetchData(url);
         }, 350);

         searchEndpointInput.addEventListener('input', debouncedSearch);

         tagButtonsContainer.addEventListener('click', function(e) {
             e.preventDefault();
             const tagLink = e.target.closest('a.dropdown-item');
             if (tagLink && !tagLink.classList.contains('disabled')) {
                 const tags = tagLink.getAttribute('data-tags');
                 searchEndpointInput.value = '';
                 fetchData(`/renderpage?tags=${encodeURIComponent(tags)}`);
                 document.getElementById('dropdownTags').innerHTML = `<i class="fas fa-tags me-2"></i>${tags === '' ? 'All Tags' : tagLink.textContent}`;

             }
         });

        function loadTags() {
            fetch('/tags')
                .then(res => {
                    if (!res.ok) throw new Error('Failed to load tags');
                    return res.json();
                })
                .then(data => {
                    let html = '<li><a class="dropdown-item" href="#" data-tags="">All Tags</a></li>';
                    html += '<li><hr class="dropdown-divider" style="border-top: 1px solid var(--border-color);"></li>';
                    if (data.tags && data.tags.length > 0) {
                        data.tags.sort().forEach(tag => { // Sort tags alphabetically
                            html += `<li><a class="dropdown-item" href="#" data-tags="${tag}">${tag}</a></li>`;
                        });
                    } else {
                         html += '<li><span class="dropdown-item disabled text-muted"><small>Tidak ada tag tersedia.</small></span></li>';
                    }
                    tagButtonsContainer.innerHTML = html;
                })
                .catch(error => {
                    console.error("Error loading tags:", error);
                    tagButtonsContainer.innerHTML = '<li><span class="dropdown-item disabled text-danger"><small>Gagal memuat tag.</small></span></li>';
                });
        }

        fetchData('/renderpage?tags=');
        loadTags();
        attachCardEvents();

        const observer = new MutationObserver(mutations => {
            mutations.forEach(mutation => {
                if (mutation.addedNodes.length) {
                   // Event delegation handles new elements, no need to re-attach typically
                }
            });
        });
        observer.observe(endpointListSection, { childList: true });

    });
  </script>
</body>
</html>