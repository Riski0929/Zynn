<!DOCTYPE html>
<html lang="id">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>NirKyy - REST API Documentation</title>
  <meta name="description" content="NirKyy Adalah Web yang menyediakan Kumpulan API gratis untuk kebutuhan bot WhatsApp, telegram, dan Web">
  <meta name="keywords" content="REST API, dokumentasi API, Collection API, NirKyy, endpoint, API documentation, web API, fetch API, coba API, bootstrap 5">
  <meta name="author" content="NirKyy Developer">
  <meta name="robots" content="index, follow">
  <meta http-equiv="Content-Security-Policy" content="upgrade-insecure-requests">
  <meta property="og:title" content="NirKyy - REST API Documentation">
  <meta property="og:description" content="NirKyy Adalah Web yang menyediakan Kumpulan API gratis untuk kebutuhan bot WhatsApp, telegram, dan Web">
  <meta property="og:type" content="website">
  <meta property="og:url" content="nirkyy.koyeb.app">
  <meta property="og:image" content="/logo.jpg">
  <meta name="twitter:card" content="summary_large_image">
  <meta name="twitter:title" content="NirKyy - REST API Documentation">
  <meta name="twitter:description" content="NirKyy Adalah Web yang menyediakan Kumpulan API gratis untuk kebutuhan bot WhatsApp, telegram, dan Web">
  <meta name="twitter:site" content="@NirKyyDev">
  <meta name="twitter:image" content="/logo.jpg">
  <link rel="icon" href="favicon.ico" type="image/x-icon">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css" integrity="sha512-SnH5WK+bZxgPHs44uWIX+LLJAJ9/2PkPKZ5QiAj6Ta86w+fsb2TkcmfRyVX3pBnMFcV7oQPJkl9QevSCWr3W6A==" crossorigin="anonymous" referrerpolicy="no-referrer" />
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600&display=swap" rel="stylesheet">
  <style>
    :root {
      --bs-body-bg: #16191e;
      --bs-body-color: #ced4da;
      --bs-primary: #0d6efd;
      --bs-secondary: #6c757d;
      --card-bg: #21252b;
      --border-color: #495057;
      --accent-color: var(--bs-primary);
      --link-color: var(--bs-primary);
      --link-hover-color: #4dabf7;
      --heading-color: #f8f9fa;
      --code-bg: #2c303a;
    }
    html { scroll-behavior: smooth; }
    body {
      font-family: 'Poppins', -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
      background-color: var(--bs-body-bg);
      color: var(--bs-body-color);
      font-size: 1rem;
      line-height: 1.6;
    }
    h1, h2, h3, h4, h5, h6 { color: var(--heading-color); font-weight: 600; }
    a { color: var(--link-color); text-decoration: none; transition: color 0.2s ease-in-out; }
    a:hover { color: var(--link-hover-color); text-decoration: underline; }
    .navbar { background-color: var(--card-bg); border-bottom: 1px solid var(--border-color); padding: 0.75rem 1.5rem; }
    .navbar-brand img { max-height: 50px; margin-right: 10px; }
    .navbar-brand { font-weight: 600; font-size: 1.5rem; color: var(--heading-color); display: flex; align-items: center; }
    .navbar-brand:hover { color: var(--heading-color); }
    .dropdown-menu { background-color: var(--card-bg); border: 1px solid var(--border-color); padding: 0.5rem 0; max-height: 70vh; overflow-y: auto; }
    .dropdown-item { color: var(--bs-body-color); padding: 0.5rem 1rem; }
    .dropdown-item:hover, .dropdown-item:focus { background-color: rgba(255, 255, 255, 0.1); color: var(--heading-color); }
    .dropdown-item.active, .dropdown-item:active { background-color: var(--accent-color); color: #fff; }
    .dropdown-toggle.btn-outline-primary { color: var(--accent-color); border-color: var(--accent-color); }
    .dropdown-toggle.btn-outline-primary:hover, .dropdown-toggle.btn-outline-primary:focus { background-color: var(--accent-color); color: #fff; }
    main.container-fluid { padding: 2rem 1.5rem; }
    .search-container { margin-bottom: 2rem; position: relative; }
    .search-container .form-control { background-color: var(--card-bg); border: 1px solid var(--border-color); color: var(--bs-body-color); padding: 0.75rem 1rem; padding-right: 3rem; border-radius: 0.375rem; }
    .search-container .form-control:focus { background-color: var(--card-bg); color: var(--bs-body-color); border-color: var(--accent-color); box-shadow: 0 0 0 0.25rem rgba(var(--bs-primary-rgb), 0.25); }
    .search-icon { position: absolute; right: 1rem; top: 50%; transform: translateY(-50%); color: var(--bs-secondary); }
    #endpointListSection .card { background-color: var(--card-bg); border: 1px solid var(--border-color); transition: transform 0.2s ease-out, box-shadow 0.2s ease-out; border-radius: 0.5rem; overflow: hidden; }
    #endpointListSection .card:hover { transform: translateY(-4px); box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3); border-color: var(--accent-color); }
    .card-header { background-color: rgba(0, 0, 0, 0.15); border-bottom: 1px solid var(--border-color); padding: 0.75rem 1.25rem; font-weight: 600; color: var(--heading-color); }
    .card-body { padding: 1.25rem; }
    .card-title { margin-bottom: 0.5rem; color: var(--heading-color); }
    .card-text { font-size: 0.95rem; margin-bottom: 1rem; }
    .badge { font-size: 0.75rem; padding: 0.3em 0.6em; }
    pre { white-space: pre-wrap; word-wrap: break-word; background-color: var(--code-bg); border: 1px solid var(--border-color); padding: 1rem; border-radius: 0.375rem; color: var(--bs-body-color); font-family: SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace; font-size: 0.9em; max-height: 400px; overflow: auto; }
    .modal-content { background-color: var(--card-bg); color: var(--bs-body-color); border: 1px solid var(--border-color); border-radius: 0.5rem; }
    .modal-header { border-bottom: 1px solid var(--border-color); padding: 1rem 1.5rem; }
    .modal-title { color: var(--heading-color); font-weight: 600; }
    .modal-body { padding: 1.5rem; }
    .modal-footer { border-top: 1px solid var(--border-color); padding: 1rem 1.5rem; background-color: rgba(0,0,0,0.1); }
    .btn-close { filter: invert(1) grayscale(100%) brightness(200%); }
    .form-label { font-weight: 600; margin-bottom: 0.5rem; color: var(--heading-color); }
    .form-control { background-color: var(--bs-body-bg); border: 1px solid var(--border-color); color: var(--bs-body-color); }
    .form-control:focus { background-color: var(--bs-body-bg); color: var(--bs-body-color); border-color: var(--accent-color); box-shadow: 0 0 0 0.25rem rgba(var(--bs-primary-rgb), 0.25); }
    .form-control::placeholder { color: var(--bs-secondary); opacity: 0.7; }
    .btn { font-weight: 600; padding: 0.5rem 1rem; border-radius: 0.375rem; transition: all 0.2s ease-in-out; }
    .btn-primary { background-color: var(--accent-color); border-color: var(--accent-color); color: #fff; }
    .btn-primary:hover { background-color: #0b5ed7; border-color: #0a58ca; }
    .btn-outline-primary { color: var(--accent-color); border-color: var(--accent-color); }
    .btn-outline-primary:hover { background-color: var(--accent-color); color: #fff; }
    .btn-outline-secondary { color: var(--bs-secondary); border-color: var(--bs-secondary); }
    .btn-outline-secondary:hover { background-color: var(--bs-secondary); color: #fff; }
    .btn-copy { position: absolute; top: 10px; right: 10px; padding: 0.2rem 0.5rem; font-size: 0.8em; background-color: rgba(255, 255, 255, 0.1); border: 1px solid var(--border-color); color: var(--bs-body-color); z-index: 10; }
    .btn-copy:hover { background-color: rgba(255, 255, 255, 0.2); }
    footer { text-align: center; padding: 2rem 1.5rem; background-color: var(--card-bg); color: var(--bs-secondary); border-top: 1px solid var(--border-color); margin-top: 3rem; font-size: 0.9rem; }
    footer p { margin-bottom: 0; }
    .loading-indicator { text-align: center; padding: 2rem; }
    .loading-indicator .spinner-border { width: 3rem; height: 3rem; color: var(--accent-color); }
    @media (max-width: 768px) {
      main.container-fluid { padding: 1.5rem 1rem; }
      .navbar { padding: 0.75rem 1rem; }
      .navbar-brand { font-size: 1.3rem; }
      .navbar-brand img { max-height: 40px; }
      h1 { font-size: 1.75rem; }
    }
    .position-relative { position: relative !important; }
    .mt-3 { margin-top: 1rem !important; }
    .mb-3 { margin-bottom: 1rem !important; }
    .mb-4 { margin-bottom: 1.5rem !important; }
    .p-2 { padding: 0.5rem !important; }
    .w-100 { width: 100% !important; }
    .text-muted { color: var(--bs-secondary) !important; }
    .d-none { display: none !important; }
  </style>
</head>
<body>

  <nav class="navbar navbar-expand-lg sticky-top">
    <div class="container-fluid">
      <a class="navbar-brand" href="#">
        <img src="/logo.jpg" alt="Logo NirKyy">
        NirKyy API
      </a>
      <div class="dropdown">
        <button class="btn btn-outline-primary dropdown-toggle" type="button" id="dropdownTags" data-bs-toggle="dropdown" aria-expanded="false">
          <i class="fas fa-tags me-1"></i> Tags
        </button>
        <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="dropdownTags" id="tagButtons">
          <li><a class="dropdown-item active" href="#" data-tags="">All Tags</a></li>
          <li><hr class="dropdown-divider"></li>
        </ul>
      </div>
    </div>
  </nav>

  <main class="container-fluid">
    <div class="search-container">
      <input type="text" id="searchEndpoint" class="form-control form-control-lg" placeholder="Cari nama endpoint, deskripsi, atau tag...">
      <i class="fas fa-search search-icon"></i>
    </div>
    <div id="endpointListSection" class="row">
       <% if (typeof endpoints !== 'undefined' && endpoints.length > 0) { %>
         <% endpoints.forEach(endpoint => { %>
           <%
             const safeEndpointData = JSON.stringify(endpoint)
                 .replace(/</g, '&lt;')
                 .replace(/>/g, '&gt;')
                 .replace(/'/g, '&#39;')
                 .replace(/"/g, '&quot;');
             const tagsHtml = (endpoint.tags && endpoint.tags.length > 0)
               ? endpoint.tags.map(tag => `<span class="badge bg-secondary me-1">${tag}</span>`).join(' ')
               : '';
             const methodColors = { GET: 'success', POST: 'primary', PUT: 'warning', DELETE: 'danger', PATCH: 'info' };
             const methodColor = methodColors[String(endpoint.method).toUpperCase()] || 'secondary';
           %>
           <div class="col-xl-4 col-lg-6 col-md-6 mb-4 d-flex align-items-stretch">
             <div class="card w-100 shadow-sm">
               <div class="card-header">
                 <span class="badge bg-<%= methodColor %> me-2"><%= endpoint.method || 'GET' %></span>
                 <code class="user-select-all"><%= endpoint.path || endpoint.endpoint || '/unknown' %></code>
               </div>
               <div class="card-body d-flex flex-column">
                 <h5 class="card-title mb-2"><%= endpoint.summary || 'No Summary' %></h5>
                 <p class="card-text text-muted small flex-grow-1"><%= endpoint.description || 'No description provided.' %></p>
                 <div class="mb-3">
                   <%- tagsHtml %>
                 </div>
                 <div class="mt-auto d-grid gap-2 d-sm-flex">
                   <button class="btn btn-primary flex-sm-fill try-button" data-endpoint='<%= safeEndpointData %>'>
                     <i class="fas fa-play me-1"></i> Try
                   </button>
                   <button class="btn btn-outline-secondary flex-sm-fill copy-url-button" data-url="<%= endpoint.endpoint || '#' %>">
                     <i class="far fa-copy me-1"></i> Copy URL
                   </button>
                 </div>
               </div>
             </div>
           </div>
         <% }) %>
       <% } else { %>
         <div class="col-12">
           <p class="alert alert-info text-center">Silahkan Pilih Tag Terlebih Dahulu!🗿.</p>
         </div>
       <% } %>
    </div>
  </main>

  <footer class="mt-auto">
    <p>&copy; <%= new Date().getFullYear() %> NirKyy. Tetap semangat ngoding! | Join Saluran <a href="https://whatsapp.com/channel/0029Vb3qLJRDuMRdjacRwe2T" target="_blank" rel="noopener noreferrer">WhatsApp <i class="fab fa-whatsapp"></i></a></p>
  </footer>

  <div class="modal fade" id="tryModal" tabindex="-1" aria-labelledby="tryModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="tryModalLabel"><i class="fas fa-vial me-2"></i>Coba Endpoint</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" id="closeButton"></button>
        </div>
        <div class="modal-body">
          <div id="parameterInputs" class="mb-4"></div>
          <button id="runButton" class="btn btn-primary w-100 mb-3">
             <span class="spinner-border spinner-border-sm me-2 d-none" role="status" aria-hidden="true"></span>
             <i class="fas fa-play me-1"></i> Run Request
          </button>
          <div id="apiResponse" class="mt-4">
             <div class="position-relative mb-3">
               <h5>Endpoint URL:</h5>
               <button id="copyEndpointButton" class="btn btn-sm btn-copy d-none" title="Salin Endpoint URL"><i class="far fa-copy"></i></button>
               <pre id="endpointUrlDisplay" class="p-2">Tekan 'Run Request' untuk melihat URL</pre>
             </div>
            <div class="position-relative mb-3">
              <h5>Response Header:</h5>
              <button id="copyResponseHeader" class="btn btn-sm btn-copy d-none" title="Salin Header"><i class="far fa-copy"></i></button>
              <pre id="responseHeader" class="p-2"></pre>
            </div>
            <div class="position-relative mb-3">
              <h5>Response Body:</h5>
              <button id="copyResponseBody" class="btn btn-sm btn-copy d-none" title="Salin Body"><i class="far fa-copy"></i></button>
              <pre id="responseBody" class="p-2"></pre>
            </div>
            <div id="responseMedia" class="mt-3 text-center"></div>
          </div>
          <div id="axiosExample" class="mt-4">
            <div class="position-relative">
              <h5>Contoh Kode Axios (GET):</h5>
               <button id="copyAxiosButton" class="btn btn-sm btn-copy d-none" title="Salin Kode Axios"><i class="far fa-copy"></i></button>
              <pre id="axiosSnippet"><code></code></pre>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="modal fade" id="whatsappModal" tabindex="-1" aria-labelledby="whatsappModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header border-0">
          <h5 class="modal-title" id="whatsappModalLabel"><i class="fab fa-whatsapp me-2 text-success"></i> Gabung Saluran WhatsApp!</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <p>Dapatkan update API terbaru, info penting, dan diskusi seru seputar NirKyy API. Yuk, gabung ke saluran WhatsApp kami!</p>
        </div>
        <div class="modal-footer border-0 justify-content-center">
          <a href="https://whatsapp.com/channel/0029Vb3qLJRDuMRdjacRwe2T" target="_blank" rel="noopener noreferrer" class="btn btn-success">
            <i class="fab fa-whatsapp me-2"></i> Gabung Sekarang
          </a>
           <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Nanti Saja</button>
        </div>
      </div>
    </div>
  </div>

  <audio id="successSound" src="success.mp3" preload="auto"></audio>
  <audio id="errorSound" src="error.mp3" preload="auto"></audio>

  <script src="https://code.jquery.com/jquery-3.7.1.min.js" integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

  <script>
    const serverEndpointsData = <%- JSON.stringify(typeof endpoints !== 'undefined' ? endpoints : []) %>;
  </script>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      let finalApiUrl = '';
      let isFetchingTags = false;
      let isFetchingRenderPage = false;
      let allEndpointsData = serverEndpointsData;
      let currentEndpointData = null;

      const endpointListSection = document.getElementById('endpointListSection');
      const searchEndpointInput = document.getElementById('searchEndpoint');
      const tagButtonsContainer = document.getElementById('tagButtons');
      const tryModalElement = document.getElementById('tryModal');
      const tryModal = new bootstrap.Modal(tryModalElement);
      const parameterInputsDiv = document.getElementById('parameterInputs');
      const runButton = document.getElementById('runButton');
      const runButtonSpinner = runButton.querySelector('.spinner-border');
      const runButtonIcon = runButton.querySelector('.fa-play');
      const endpointUrlDisplay = document.getElementById('endpointUrlDisplay');
      const responseHeaderPre = document.getElementById('responseHeader');
      const responseBodyPre = document.getElementById('responseBody');
      const responseMediaDiv = document.getElementById('responseMedia');
      const axiosSnippetPre = document.getElementById('axiosSnippet').querySelector('code');
      const copyEndpointButton = document.getElementById('copyEndpointButton');
      const copyResponseHeader = document.getElementById('copyResponseHeader');
      const copyResponseBody = document.getElementById('copyResponseBody');
      const copyAxiosButton = document.getElementById('copyAxiosButton');
      const successSound = document.getElementById('successSound');
      const errorSound = document.getElementById('errorSound');
      const whatsappModalElement = document.getElementById('whatsappModal');
      const whatsappModal = new bootstrap.Modal(whatsappModalElement);

      setTimeout(() => {
          whatsappModal.show();
      }, 7000);

      function debounce(func, wait) {
        let timeout;
        return function(...args) {
          clearTimeout(timeout);
          timeout = setTimeout(() => func.apply(this, args), wait);
        };
      }

      function showToast(message, type = 'success') {
          alert(message);
      }

      function copyToClipboard(elementOrText, buttonElement, successMessage) {
        const textToCopy = typeof elementOrText === 'string' ? elementOrText : elementOrText.textContent;
        if (!textToCopy || textToCopy.trim() === '') {
           showToast('Tidak ada konten untuk disalin.', 'error');
           return;
        }
        navigator.clipboard.writeText(textToCopy)
          .then(() => {
            showToast(successMessage || 'Berhasil disalin!');
            const originalIcon = buttonElement.innerHTML;
            buttonElement.innerHTML = '<i class="fas fa-check text-success"></i>';
            setTimeout(() => { buttonElement.innerHTML = originalIcon; }, 1500);
          })
          .catch(err => {
            console.error('Gagal menyalin:', err);
            showToast('Gagal menyalin ke clipboard.', 'error');
          });
      }

      endpointListSection.addEventListener('click', function(e) {
          const tryBtn = e.target.closest('.try-button');
          const copyBtn = e.target.closest('.copy-url-button');

          if (tryBtn) {
              e.preventDefault();
              const data = tryBtn.getAttribute('data-endpoint');
              if (data) {
                  try {
                      const endpoint = JSON.parse(data);
                      openTryModal(endpoint);
                  } catch (parseError) {
                      console.error("Failed to parse endpoint data:", parseError);
                      showToast("Gagal memuat detail endpoint.", "error");
                  }
              }
          } else if (copyBtn) {
              e.preventDefault();
              const url = copyBtn.getAttribute('data-url');
              if (url && url !== '#') {
                  copyToClipboard(url, copyBtn, 'URL Endpoint berhasil disalin!');
              } else {
                  showToast("URL tidak valid.", "error");
              }
          }
      });

      runButton.addEventListener('click', function() {
        if (runButton.disabled) return;
        if (!currentEndpointData) return;

        setLoadingState(true);

        let apiUrl = currentEndpointData.endpoint;
        const params = {};
        const pathParams = {};
        let missingRequired = false;

        parameterInputsDiv.querySelectorAll('.param-input').forEach(input => {
          const paramName = input.name;
          const paramData = currentEndpointData.parameter.find(p => p.params === paramName);
          if (!paramData) return;

          const isRequired = (paramData.opsional === false);
          const defaultValue = paramData.example || '';
          const value = input.value.trim();
          const paramLocation = paramData.in || 'query';

          if (value) {
             if(paramLocation === 'path') pathParams[paramName] = value;
             else params[paramName] = value;
          } else if (!isRequired && defaultValue) {
             if(paramLocation === 'path') pathParams[paramName] = defaultValue;
             else params[paramName] = defaultValue;
          } else if (isRequired) {
             missingRequired = true;
             input.classList.add('is-invalid');
          }
        });

        parameterInputsDiv.querySelectorAll('.is-invalid').forEach(el => el.classList.remove('is-invalid'));

        if (missingRequired) {
          showToast('Harap isi semua parameter wajib (*).', 'error');
          setLoadingState(false);
          return;
        }

        Object.keys(pathParams).forEach(paramName => {
            const placeholder = `{${paramName}}`;
            if (apiUrl.includes(placeholder)) {
                apiUrl = apiUrl.replace(placeholder, encodeURIComponent(pathParams[paramName]));
            }
        });

        if (/\{.*\}/.test(apiUrl)) {
             console.error("Masih ada path parameter yang belum terganti:", apiUrl);
             showToast('Gagal membuat URL: Path parameter belum lengkap.', 'error');
             setLoadingState(false);
             return;
        }

        const base = window.location.origin;
        let urlObject;
        try {
            urlObject = new URL(apiUrl, base);
        } catch (e) {
             console.error("Invalid URL generated:", apiUrl);
             showToast('Gagal membuat URL endpoint.', 'error');
             setLoadingState(false);
             return;
        }

        Object.entries(params).forEach(([key, value]) => urlObject.searchParams.append(key, value));
        finalApiUrl = urlObject.href;
        endpointUrlDisplay.textContent = finalApiUrl;
        copyEndpointButton.classList.remove('d-none');

        clearModalResultsDisplay();

        const requestConfig = {
            method: currentEndpointData.method || 'GET',
            url: finalApiUrl,
        };

        const probableBinary = /\.(jpg|jpeg|png|gif|webp|mp4|webm|mp3|wav|ogg)$/i.test(finalApiUrl) ||
                                (currentEndpointData.produces && currentEndpointData.produces.some(type => /image|video|audio/.test(type)));

        if (probableBinary) requestConfig.responseType = 'blob';

        axios(requestConfig)
          .then(response => { handleApiResponse(response, probableBinary); playFeedbackSound(response.data); })
          .catch(error => { handleApiError(error, probableBinary); errorSound.play(); })
          .finally(() => { setLoadingState(false); generateAxiosSnippet(base + apiUrl, params, probableBinary); });
      });

      function handleApiResponse(response, wasBlobRequest) {
          let headerString = `Status: ${response.status} ${response.statusText}\n`;
          Object.entries(response.headers).forEach(([key, value]) => { headerString += `${key}: ${value}\n`; });
          responseHeaderPre.textContent = headerString.trim();
          copyResponseHeader.classList.remove('d-none');
          const contentType = response.headers['content-type'] || '';

          if (wasBlobRequest && response.data instanceof Blob) {
              const blob = response.data;
              responseBodyPre.textContent = `Binary data (${contentType}, ${formatBytes(blob.size)})`;
              copyResponseBody.classList.add('d-none');
              if (contentType.startsWith('image/')) {
                  const imgUrl = URL.createObjectURL(blob);
                  responseMediaDiv.innerHTML = `<img src="${imgUrl}" class="img-fluid rounded" alt="API Response Image" onload="URL.revokeObjectURL(this.src)">`;
              } else if (contentType.startsWith('video/')) {
                  const vidUrl = URL.createObjectURL(blob);
                  responseMediaDiv.innerHTML = `<video controls src="${vidUrl}" class="img-fluid rounded" onloadedmetadata="URL.revokeObjectURL(this.src)">Browser tidak support video.</video>`;
              } else if (contentType.startsWith('audio/')) {
                  const audUrl = URL.createObjectURL(blob);
                  responseMediaDiv.innerHTML = `<audio controls src="${audUrl}" class="w-100" onloadedmetadata="URL.revokeObjectURL(this.src)">Browser tidak support audio.</audio>`;
              } else {
                  responseMediaDiv.innerHTML = `<a href="${URL.createObjectURL(blob)}" download="response_data" class="btn btn-secondary">Download Binary Data</a>`;
              }
          } else if (contentType.includes('application/json') && typeof response.data === 'object') {
              responseBodyPre.textContent = JSON.stringify(response.data, null, 2);
              copyResponseBody.classList.remove('d-none');
          } else {
              responseBodyPre.textContent = typeof response.data === 'string' ? response.data : JSON.stringify(response.data);
              copyResponseBody.classList.remove('d-none');
          }
      }

      function handleApiError(error, wasBlobRequest) {
          if (error.response) {
              let headerString = `Status: ${error.response.status} ${error.response.statusText}\n`;
              Object.entries(error.response.headers).forEach(([key, value]) => { headerString += `${key}: ${value}\n`; });
              responseHeaderPre.textContent = headerString.trim();
              copyResponseHeader.classList.remove('d-none');
              const contentType = error.response.headers['content-type'] || '';

              if (wasBlobRequest && error.response.data instanceof Blob) {
                   const blob = error.response.data;
                   const reader = new FileReader();
                   reader.onload = function() {
                       try {
                           const jsonData = JSON.parse(reader.result); responseBodyPre.textContent = JSON.stringify(jsonData, null, 2);
                       } catch(e) { responseBodyPre.textContent = reader.result; }
                       copyResponseBody.classList.remove('d-none');
                   }
                   reader.onerror = function() { responseBodyPre.textContent = `Could not read error response Blob (${contentType}, ${formatBytes(blob.size)})`; copyResponseBody.classList.add('d-none'); }
                   reader.readAsText(blob);
              } else if (contentType.includes('application/json') && typeof error.response.data === 'object') {
                  responseBodyPre.textContent = JSON.stringify(error.response.data, null, 2); copyResponseBody.classList.remove('d-none');
              } else {
                  responseBodyPre.textContent = typeof error.response.data === 'string' ? error.response.data : JSON.stringify(error.response.data); copyResponseBody.classList.remove('d-none');
              }
          } else if (error.request) {
              responseHeaderPre.textContent = 'Error: No response received'; responseBodyPre.textContent = error.message; copyResponseHeader.classList.add('d-none'); copyResponseBody.classList.remove('d-none');
          } else {
              responseHeaderPre.textContent = 'Error: Request setup failed'; responseBodyPre.textContent = error.message; copyResponseHeader.classList.add('d-none'); copyResponseBody.classList.remove('d-none');
          }
      }

      function formatBytes(bytes, decimals = 2) {
          if (bytes === 0) return '0 Bytes';
          const k = 1024; const dm = decimals < 0 ? 0 : decimals; const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
          const i = Math.floor(Math.log(bytes) / Math.log(k));
          return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
       }

      function playFeedbackSound(responseData) {
          if (responseData && responseData.success === false) errorSound.play();
          else successSound.play();
      }

      function setLoadingState(isLoading) {
          runButton.disabled = isLoading;
          if (isLoading) {
              runButtonSpinner.classList.remove('d-none'); runButtonIcon.classList.add('d-none'); runButton.childNodes[runButton.childNodes.length - 1].nodeValue = " Running...";
          } else {
              runButtonSpinner.classList.add('d-none'); runButtonIcon.classList.remove('d-none'); runButton.childNodes[runButton.childNodes.length - 1].nodeValue = " Run Request";
          }
      }

      function generateAxiosSnippet(baseUrl, queryParams, needsArrayBuffer) {
          let configOptions = "";
          if (Object.keys(queryParams).length > 0) configOptions += `\n  params: ${JSON.stringify(queryParams, null, 2)}`;
          if (needsArrayBuffer) configOptions += `${configOptions ? ',' : ''}\n  responseType: 'blob'`;
          const configString = configOptions ? `, {${configOptions}\n}` : '';
          const axiosCode = `axios.get('${baseUrl}'${configString})\n  .then(response => {\n    console.log(response);\n  })\n  .catch(error => {\n    console.error(error);\n  });`;
          axiosSnippetPre.textContent = axiosCode;
          copyAxiosButton.classList.remove('d-none');
      }

      function openTryModal(endpoint) {
        currentEndpointData = endpoint;
        parameterInputsDiv.innerHTML = '';
        clearModalResults();
        document.getElementById('tryModalLabel').textContent = `Coba: ${endpoint.method || 'GET'} ${endpoint.path || endpoint.endpoint}`;

        if (endpoint.parameter && endpoint.parameter.length > 0) {
          endpoint.parameter.forEach(param => {
            const defaultValue = param.example || '';
            const isRequired = (param.opsional === false);
            const description = param.desc || `Parameter ${param.params}`;
            const paramLocation = param.in || 'query';

            const div = document.createElement('div'); div.className = 'mb-3';
            const label = document.createElement('label'); label.htmlFor = `param-${param.params}`; label.className = 'form-label';
            label.textContent = `${param.params}${isRequired ? '*' : ''} (${paramLocation})`; label.title = description;
            const input = document.createElement('input'); input.type = 'text'; input.className = 'form-control param-input'; input.id = `param-${param.params}`; input.name = param.params;
            input.placeholder = !defaultValue ? description : ''; // Only show desc placeholder if no example
            if(defaultValue) {
                input.value = defaultValue; // Pre-fill with example value
            }
            const small = document.createElement('small'); small.className = 'form-text text-muted'; small.textContent = description;
            div.appendChild(label); div.appendChild(input); div.appendChild(small);
            parameterInputsDiv.appendChild(div);
          });
        } else {
            parameterInputsDiv.innerHTML = '<p class="text-muted">Endpoint ini tidak memerlukan parameter.</p>';
        }
        tryModal.show();
      }

      tryModalElement.addEventListener('hidden.bs.modal', event => {
           clearModalResults(); currentEndpointData = null;
       });

      function clearModalResultsDisplay() {
         responseHeaderPre.textContent = ''; responseBodyPre.textContent = ''; responseMediaDiv.innerHTML = '';
         copyResponseHeader.classList.add('d-none'); copyResponseBody.classList.add('d-none');
      }

      function clearModalResults() {
        clearModalResultsDisplay();
        axiosSnippetPre.textContent = '';
        endpointUrlDisplay.textContent = 'Tekan \'Run Request\' untuk melihat URL';
        finalApiUrl = '';
        copyEndpointButton.classList.add('d-none'); copyAxiosButton.classList.add('d-none');
        parameterInputsDiv.querySelectorAll('.is-invalid').forEach(el => el.classList.remove('is-invalid'));
      }

      copyEndpointButton.addEventListener('click', () => copyToClipboard(finalApiUrl, copyEndpointButton, 'Endpoint URL berhasil disalin!'));
      copyResponseHeader.addEventListener('click', () => copyToClipboard(responseHeaderPre, copyResponseHeader, 'Response Header berhasil disalin!'));
      copyResponseBody.addEventListener('click', () => copyToClipboard(responseBodyPre, copyResponseBody, 'Response Body berhasil disalin!'));
      copyAxiosButton.addEventListener('click', () => copyToClipboard(axiosSnippetPre, copyAxiosButton, 'Kode Axios berhasil disalin!'));

      function renderEndpointsHTML(htmlContent) {
          const parser = new DOMParser();
          const doc = parser.parseFromString(htmlContent, 'text/html');
          const row = doc.querySelector('.row');
          if (row) {
               endpointListSection.innerHTML = row.innerHTML;
           } else {
               endpointListSection.innerHTML = htmlContent;
           }
      }

       function showLoadingIndicator() {
           endpointListSection.innerHTML = `<div class="col-12 text-center p-5"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div><p class="mt-3">Memuat...</p></div>`;
       }

       function showErrorIndicator(message = "Gagal memuat data.") {
            endpointListSection.innerHTML = `<div class="col-12"><p class="alert alert-danger text-center">${message}</p></div>`;
       }


      function loadTags() {
        if (isFetchingTags) return;
        isFetchingTags = true;
        fetch('/tags')
          .then(res => {
              if (!res.ok) throw new Error(`HTTP error! status: ${res.status}`);
              return res.json();
           })
          .then(data => {
            const uniqueTags = new Set(data.tags || []);
            const sortedTags = Array.from(uniqueTags).sort((a, b) => a.toLowerCase().localeCompare(b.toLowerCase()));
            let tagsHtml = '<li><a class="dropdown-item active" href="#" data-tags="">All Tags</a></li>'; // Add active class here
            tagsHtml += '<li><hr class="dropdown-divider"></li>';
            sortedTags.forEach(tag => {
              tagsHtml += `<li><a class="dropdown-item" href="#" data-tags="${tag}">${tag}</a></li>`;
            });
            tagButtonsContainer.innerHTML = tagsHtml;
          })
          .catch(error => {
              console.error('Error fetching tags:', error);
              tagButtonsContainer.innerHTML = '<li><a class="dropdown-item text-danger" href="#">Gagal memuat tags</a></li>';
          })
          .finally(() => { isFetchingTags = false; });
      }

      searchEndpointInput.addEventListener('input', debounce(function() {
        const searchTerm = searchEndpointInput.value.trim().toLowerCase();
        if (!searchTerm) {
             const activeTagItem = tagButtonsContainer.querySelector('.dropdown-item.active');
             const tags = activeTagItem ? activeTagItem.getAttribute('data-tags') || '' : '';
             fetchAndRenderByTags(tags);
             return;
        }

        const filtered = allEndpointsData.filter(ep =>
           (ep.path && ep.path.toLowerCase().includes(searchTerm)) ||
           (ep.summary && ep.summary.toLowerCase().includes(searchTerm)) ||
           (ep.description && ep.description.toLowerCase().includes(searchTerm)) ||
           (ep.tags && ep.tags.some(tag => tag.toLowerCase().includes(searchTerm)))
        );

        if (filtered.length > 0) {
             let html = '';
             filtered.forEach(endpoint => {
                 const safeEndpointData = JSON.stringify(endpoint).replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/'/g, '&#39;').replace(/"/g, '&quot;');
                 const tagsHtml = (endpoint.tags && endpoint.tags.length > 0) ? endpoint.tags.map(tag => `<span class="badge bg-secondary me-1">${tag}</span>`).join(' ') : '';
                 const methodColors = { GET: 'success', POST: 'primary', PUT: 'warning', DELETE: 'danger', PATCH: 'info' };
                 const methodColor = methodColors[String(endpoint.method).toUpperCase()] || 'secondary';
                 html += `
                     <div class="col-xl-4 col-lg-6 col-md-6 mb-4 d-flex align-items-stretch">
                       <div class="card w-100 shadow-sm">
                         <div class="card-header"><span class="badge bg-${methodColor} me-2">${endpoint.method || 'GET'}</span><code class="user-select-all">${endpoint.path || endpoint.endpoint || '/unknown'}</code></div>
                         <div class="card-body d-flex flex-column">
                           <h5 class="card-title mb-2">${endpoint.summary || 'No Summary'}</h5>
                           <p class="card-text text-muted small flex-grow-1">${endpoint.description || 'No description provided.'}</p>
                           <div class="mb-3">${tagsHtml}</div>
                           <div class="mt-auto d-grid gap-2 d-sm-flex">
                             <button class="btn btn-primary flex-sm-fill try-button" data-endpoint='${safeEndpointData}'><i class="fas fa-play me-1"></i> Try</button>
                             <button class="btn btn-outline-secondary flex-sm-fill copy-url-button" data-url="${endpoint.endpoint || '#'}"><i class="far fa-copy me-1"></i> Copy URL</button>
                           </div>
                         </div>
                       </div>
                     </div>`;
             });
             endpointListSection.innerHTML = html;
         } else {
             endpointListSection.innerHTML = '<div class="col-12"><p class="alert alert-warning text-center">Tidak ada endpoint yang cocok dengan pencarian Anda.</p></div>';
         }

      }, 300));

       function fetchAndRenderByTags(tags) {
           if (isFetchingRenderPage) return;
           isFetchingRenderPage = true;
           showLoadingIndicator();
           searchEndpointInput.value = '';

           fetch('/renderpage?tags=' + encodeURIComponent(tags))
             .then(response => {
                 if (!response.ok) { throw new Error(`HTTP error! Status: ${response.status}`); }
                 return response.text();
             })
             .then(html => {
                 renderEndpointsHTML(html);
             })
             .catch(error => {
                 console.error('Error fetching /renderpage:', error);
                 showErrorIndicator('Gagal memuat endpoint berdasarkan tag.');
             })
             .finally(() => { isFetchingRenderPage = false; });
       }


      tagButtonsContainer.addEventListener('click', function(e) {
        e.preventDefault();
        const link = e.target.closest('a.dropdown-item');
        if (link && !isFetchingRenderPage) {
            tagButtonsContainer.querySelectorAll('.dropdown-item').forEach(item => item.classList.remove('active'));
            link.classList.add('active');
            const tags = link.getAttribute('data-tags') || '';
            fetchAndRenderByTags(tags);
        }
      });

      loadTags();

    });
  </script>

</body>
</html>
