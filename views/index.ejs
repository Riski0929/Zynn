<!DOCTYPE html>
<html lang="id">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>NirKyy - REST API Documentation</title>
  <meta name="google-site-verification" content="J-VFugOfjbkh7eTymofIL-zoG7ne6R91Q-G4gnTEEDw" />
  <meta name="description" content="Nirkyy Adalah Web yang menyediakan Kumpulan API gratis untuk kebutuhan bot WhatsApp, telegram, dan Web">
  <meta name="keywords" content="REST API, dokumentasi API, Collection API, NirKyy, endpoint, API documentation, web API, fetch API, coba API">
  <meta name="author" content="NirKyy Developer">
  <meta name="robots" content="index, follow">
  <meta http-equiv="Content-Security-Policy" content="upgrade-insecure-requests">
  <meta property="og:title" content="NirKyy - REST API Documentation">
  <meta property="og:description" content="Nirkyy Adalah Web yang menyediakan Kumpulan API gratis untuk kebutuhan bot WhatsApp, telegram, dan Web">
  <meta property="og:type" content="website">
  <meta property="og:url" content="nirkyy.koyeb.app">
  <meta property="og:image" content="/logo.jpg">
  <meta name="twitter:card" content="summary_large_image">
  <meta name="twitter:title" content="NirKyy - REST API Documentation">
  <meta name="twitter:description" content="Nirkyy Adalah Web yang menyediakan Kumpulan API gratis untuk kebutuhan bot WhatsApp, telegram, dan Web">
  <meta name="twitter:site" content="@NirKyyDev">
  <meta name="twitter:image" content="/logo.jpg">
  <link rel="icon" href="favicon.ico" type="image/x-icon">
  <!-- Library CSS -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" crossorigin="anonymous">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700&display=swap" rel="stylesheet">
  <style>
    /* Variabel CSS untuk tema */
    :root {
      --bg-color: #f5f5f5;
      --text-color: #333;
      --accent-color: #007bff;
      --border-color: #ddd;
    }
    .dark-theme {
      --bg-color: #111;
      --text-color: #ccc;
      --accent-color: #00aced;
      --border-color: #444;
    }
    body {
      font-family: 'Orbitron', sans-serif;
      background-color: var(--bg-color);
      color: var(--text-color);
      margin: 0;
      padding: 0;
      overflow-x: hidden;
    }
    header {
      background-color: var(--bg-color);
      padding: 10px 20px;
      border-bottom: 2px solid var(--border-color);
      display: flex;
      align-items: center;
      justify-content: space-between;
      flex-wrap: wrap;
    }
    .header-left {
      display: flex;
      align-items: center;
    }
    .header-left img {
      max-height: 70px;
      margin-right: 15px;
    }
    .header-title {
      font-size: 1.5rem;
      margin: 0;
    }
    /* Tombol toggle tema */
    #themeToggle {
      background-color: transparent;
      border: 1px solid var(--accent-color);
      color: var(--accent-color);
      padding: 5px 10px;
      border-radius: 5px;
      cursor: pointer;
    }
    main.container-fluid {
      padding: 20px 40px;
    }
    .search-container {
      margin-top: 20px;
      position: relative;
      text-align: center;
    }
    .search-container input[type="text"] {
      padding: 10px 35px 10px 10px;
      border: 2px solid var(--accent-color);
      background-color: var(--bg-color);
      color: var(--text-color);
      border-radius: 5px;
      width: 100%;
      max-width: 600px;
      font-size: 1em;
      transition: border-color 0.3s ease, box-shadow 0.3s ease;
    }
    .search-container input[type="text"]:focus {
      border-color: var(--accent-color);
      box-shadow: 0 0 8px var(--accent-color);
      outline: none;
    }
    .dropdown {
      margin: 10px 0;
    }
    .dropdown-toggle {
      background-color: var(--bg-color);
      color: var(--accent-color);
      border: 1px solid var(--accent-color);
      padding: 8px 12px;
      border-radius: 5px;
    }
    .dropdown-menu {
      background-color: var(--bg-color);
      border: 1px solid var(--accent-color);
    }
    .dropdown-item {
      color: var(--accent-color);
      padding: 8px 12px;
    }
    .dropdown-item:hover {
      background-color: var(--border-color);
    }
    #endpointListSection .card {
      border: 1px solid var(--accent-color);
      background-color: var(--bg-color);
      color: var(--text-color);
      transition: transform 0.3s ease, box-shadow 0.3s ease;
      margin-bottom: 15px;
    }
    #endpointListSection .card:hover {
      transform: translateY(-5px);
      box-shadow: 0 0 15px var(--accent-color);
    }
    .card-header {
      background-color: var(--border-color);
      color: var(--accent-color);
      border-bottom: 1px solid var(--accent-color);
    }
    .card-body {
      padding: 1.5rem;
    }
    pre {
      white-space: pre-wrap;
      background-color: var(--border-color);
      border: 1px solid var(--accent-color);
      padding: 10px;
      border-radius: 5px;
      overflow-x: auto;
      color: var(--text-color);
    }
    /* Modal */
    .modal {
      display: none;
      position: fixed;
      z-index: 1050;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      overflow: auto;
      background-color: rgba(0,0,0,0.8);
    }
    .modal-content {
      background-color: var(--bg-color);
      color: var(--text-color);
      border: 1px solid var(--accent-color);
      border-radius: 10px;
    }
    .modal-header, .modal-footer {
      padding: 1rem 1.5rem;
      border: none;
    }
    .modal-header {
      border-bottom: 1px solid var(--accent-color);
    }
    .modal-title {
      color: var(--accent-color);
      font-weight: bold;
    }
    .modal-body {
      padding: 1.5rem;
    }
    footer {
      text-align: center;
      padding: 20px;
      background-color: var(--bg-color);
      color: var(--text-color);
      border-top: 2px solid var(--accent-color);
    }
    .axios-code {
      background-color: var(--border-color);
      padding: 10px;
      border-radius: 5px;
      margin-top: 10px;
      overflow-x: auto;
      font-family: monospace;
      font-size: 0.9em;
      color: var(--text-color);
      border: 1px solid var(--accent-color);
    }
    .btn-primary, .btn-info, .btn-outline-info {
      font-family: 'Orbitron', sans-serif;
      border: 1px solid var(--accent-color);
      background-color: var(--accent-color);
      color: var(--bg-color);
      transition: background-color 0.3s ease, color 0.3s ease, border-color 0.3s ease;
    }
    .btn-primary:hover, .btn-info:hover, .btn-outline-info:hover,
    .btn-primary:focus, .btn-info:focus, .btn-outline-info:focus {
      background-color: var(--bg-color);
      color: var(--accent-color);
      border-color: var(--accent-color);
      box-shadow: 0 0 5px var(--accent-color);
    }
    /* Loading Animation dengan 2 roda gigi */
    .loading {
      text-align: center;
      margin: 20px auto;
    }
    .gear {
      font-size: 2.5em;
      margin: 0 10px;
      display: inline-block;
    }
    .gear1 {
      animation: rotate-clockwise 1.5s linear infinite;
    }
    .gear2 {
      animation: rotate-counterclockwise 1.5s linear infinite;
    }
    @keyframes rotate-clockwise {
      from { transform: rotate(0deg); }
      to { transform: rotate(360deg); }
    }
    @keyframes rotate-counterclockwise {
      from { transform: rotate(0deg); }
      to { transform: rotate(-360deg); }
    }
  </style>
</head>
<body class="dark-theme">
  <header>
    <div class="header-left">
      <img src="/logo.jpg" alt="Logo NirKyy">
      <h1 class="header-title">NirKyy</h1>
    </div>
    <!-- Tombol toggle tema -->
    <button id="themeToggle">Terang</button>
    <!-- Menu Dropdown untuk Tags -->
    <div class="dropdown">
      <button class="btn dropdown-toggle" type="button" id="dropdownTags" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        <i class="fas fa-bars"></i> Tags
      </button>
      <div class="dropdown-menu" aria-labelledby="dropdownTags" id="tagButtons">
        <!-- Item Tags akan dimuat melalui JS -->
      </div>
    </div>
  </header>
  <main class="container-fluid">
    <div class="search-container">
      <input type="text" id="searchEndpoint" placeholder="Cari Endpoint atau Tag">
      <i class="fas fa-search search-icon"></i>
    </div>
    <div id="endpointListSection"></div>
  </main>
  <footer>
    <p>&copy; 2025 NirKyy. API Bakal tetep aktif selama Koyeb gratisüóøüôè | Join Saluran <a href="https://whatsapp.com/channel/0029Vb3qLJRDuMRdjacRwe2T" target="_blank">WhatsApp</a></p>
  </footer>
    
  <!-- Modal Try Endpoint -->
  <div id="tryModal" class="modal">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Coba Endpoint</h5>
          <button type="button" class="close" id="closeButton">√ó</button>
        </div>
        <div class="modal-body">
          <div id="parameterInputs"></div>
          <button id="runButton" class="btn btn-info btn-block"><i class="fas fa-play"></i> Run</button>
          <!-- Loading Animation: 2 Roda Gigi -->
          <div id="loadingIndicator" class="loading" style="display:none;">
            <i class="fas fa-cog gear gear1"></i>
            <i class="fas fa-cog gear gear2"></i>
          </div>
          <div id="apiResponse" class="mt-3">
            <div style="position: relative;">
              <h5>Response Header:</h5>
              <button id="copyResponseHeader" class="btn btn-link btn-sm" style="position: absolute; right: 5px; top: 5px; display: none;">Salin</button>
            </div>
            <pre id="responseHeader" class="p-2"></pre>
            <div style="position: relative;">
              <h5>Response Body:</h5>
              <button id="copyResponseBody" class="btn btn-link btn-sm" style="position: absolute; right: 5px; top: 5px; display: none;">Salin</button>
            </div>
            <pre id="responseBody" class="p-2"></pre>
            <div style="position: relative;">
              <h5>Endpoint:</h5>
              <button id="copyEndpointButton" class="btn btn-link btn-sm" style="position: absolute; right: 5px; top: 5px; display: none;">Salin</button>
            </div>
          </div>
          <div id="axiosExample" class="axios-code mt-3">
            <div style="position: relative;">
              <h5>Contoh Kode Axios (GET):</h5>
              <button id="copyAxiosButton" class="btn btn-link btn-sm" style="position: absolute; right: 5px; top: 5px; display: none;">Salin</button>
            </div>
            <pre id="axiosSnippet"><code></code></pre>
          </div>
        </div>
      </div>
    </div>
  </div>
    
  <!-- Audio -->
  <audio id="successSound" src="success.mp3" preload="auto"></audio>
  <audio id="errorSound" src="error.mp3" preload="auto"></audio>
    
  <!-- Library JS -->
  <script src="https://code.jquery.com/jquery-3.5.1.min.js" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js" defer></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js" defer></script>
    
  <script defer>
    document.addEventListener('DOMContentLoaded', function() {
      let finalApiUrl = '';
      let isFetching = false;

      const endpointListSection = document.getElementById('endpointListSection');
      const searchEndpointInput = document.getElementById('searchEndpoint');
      const tagButtonsContainer = document.getElementById('tagButtons');
      const tryModal = document.getElementById('tryModal');
      const closeButton = document.getElementById('closeButton');
      const parameterInputsDiv = document.getElementById('parameterInputs');
      const runButton = document.getElementById('runButton');
      const responseHeader = document.getElementById('responseHeader');
      const responseBody = document.getElementById('responseBody');
      const axiosSnippetPre = document.getElementById('axiosSnippet');
      const loadingIndicator = document.getElementById('loadingIndicator');
      const successSound = document.getElementById('successSound');
      const errorSound = document.getElementById('errorSound');
      const copyResponseHeader = document.getElementById('copyResponseHeader');
      const copyResponseBody = document.getElementById('copyResponseBody');
      const copyEndpointButton = document.getElementById('copyEndpointButton');
      const copyAxiosButton = document.getElementById('copyAxiosButton');
      const themeToggle = document.getElementById('themeToggle');
      let currentEndpointData = null;

      // Toggle tema antara gelap dan terang
      themeToggle.addEventListener('click', function() {
        document.body.classList.toggle('dark-theme');
        if(document.body.classList.contains('dark-theme')){
          themeToggle.textContent = 'Terang';
        } else {
          themeToggle.textContent = 'Gelap';
        }
      });

      // Debounce untuk pencarian
      function debounce(func, wait) {
        let timeout;
        return function(...args) {
          clearTimeout(timeout);
          timeout = setTimeout(() => func.apply(this, args), wait);
        };
      }

      function attachCardEvents() {
        endpointListSection.addEventListener('click', function(e) {
          const btn = e.target.closest('button');
          if (!btn) return;
          if (btn.classList.contains('copy-url-button')) {
            const url = btn.getAttribute('data-url');
            navigator.clipboard.writeText(url)
              .then(() => alert('URL berhasil di-copy!'))
              .catch(() => alert('Gagal copy URL.'));
          } else if (btn.classList.contains('try-button')) {
            const data = btn.getAttribute('data-endpoint');
            if (data) {
              const endpoint = JSON.parse(data);
              openTryModal(endpoint);
            }
          }
        });
      }

      function openTryModal(endpoint) {
        currentEndpointData = endpoint;
        parameterInputsDiv.innerHTML = '';
        responseHeader.textContent = '';
        responseBody.textContent = '';
        axiosSnippetPre.innerHTML = '<code></code>';
        finalApiUrl = '';
        copyResponseHeader.style.display = 'none';
        copyResponseBody.style.display = 'none';
        copyEndpointButton.style.display = 'none';
        copyAxiosButton.style.display = 'none';

        if (endpoint.parameter && endpoint.parameter.length > 0) {
          endpoint.parameter.forEach(param => {
            const paramName = param.params;
            const defaultValue = param.example || '';
            const required = (param.opsional === false);
            const div = document.createElement('div');
            div.className = 'mb-3';
            const label = document.createElement('label');
            label.textContent = paramName + (required ? ' (Wajib):' : ' (Opsional):');
            const input = document.createElement('input');
            input.type = 'text';
            input.className = 'form-control';
            input.name = paramName;
            input.placeholder = defaultValue ? 'Default: ' + defaultValue : 'Masukkan ' + paramName;
            input.value = defaultValue;
            if (required) input.required = true;
            div.appendChild(label);
            div.appendChild(input);
            parameterInputsDiv.appendChild(div);
          });
        }
        tryModal.style.display = 'block';
      }

      window.addEventListener('click', function(event) {
        if (event.target === tryModal && loadingIndicator.style.display !== 'block') {
          tryModal.style.display = 'none';
          clearModalData();
        }
      });

      closeButton.addEventListener('click', function() {
        if (loadingIndicator.style.display !== 'block') {
          tryModal.style.display = 'none';
          clearModalData();
        }
      });

      function clearModalData() {
        responseHeader.textContent = '';
        responseBody.textContent = '';
        axiosSnippetPre.innerHTML = '<code></code>';
        finalApiUrl = '';
        copyResponseHeader.style.display = 'none';
        copyResponseBody.style.display = 'none';
        copyEndpointButton.style.display = 'none';
        copyAxiosButton.style.display = 'none';
      }

      runButton.addEventListener('click', function() {
        if (loadingIndicator.style.display === 'block') return;
        if (!currentEndpointData) return;
        runButton.disabled = true;
        closeButton.disabled = true;
        let apiUrl = currentEndpointData.endpoint;
        const params = {};
        let missingRequired = false;
        const inputs = parameterInputsDiv.querySelectorAll('input');
        inputs.forEach(input => {
          const paramName = input.name;
          const def = currentEndpointData.parameter.find(p => p.params === paramName);
          const required = (def.opsional === false);
          const defaultValue = def.example || '';
          const val = input.value.trim();
          if (val) {
            params[paramName] = val;
          } else if (!required && defaultValue) {
            params[paramName] = defaultValue;
          } else if (required && !val) {
            missingRequired = true;
          }
        });
        if (missingRequired) {
          alert('Harap isi semua parameter wajib.');
          runButton.disabled = false;
          closeButton.disabled = false;
          return;
        }
        Object.keys(params).forEach(paramName => {
          const placeholder = '{' + paramName + '}';
          if (apiUrl.includes(placeholder)) {
            apiUrl = apiUrl.replace(placeholder, params[paramName]);
            delete params[paramName];
          }
        });
        let baseUrl = apiUrl;
        const urlObj = new URL("https://nirkyy.koyeb.app" + baseUrl);
        Object.entries(params).forEach(([k, v]) => { urlObj.searchParams.append(k, v); });
        finalApiUrl = urlObj.href;
        if(finalApiUrl) { copyEndpointButton.style.display = 'block'; }

        // Tampilkan loading animation (2 roda gigi)
        loadingIndicator.style.display = 'block';
        responseHeader.textContent = '';
        responseBody.textContent = '';

        axios.get(finalApiUrl)
        .then(r => {
          loadingIndicator.style.display = 'none';
          let hdr = '';
          Object.entries(r.headers).forEach(([k, v]) => { hdr += k + ': ' + v + '\n'; });
          const ctype = r.headers['content-type'] || '';
          if (r.status >= 200 && r.status < 300) {
            if (r.data && r.data.success === false) {
              errorSound.play();
              responseHeader.textContent = hdr;
              responseBody.textContent = JSON.stringify(r.data, null, 2);
            } else {
              successSound.play();
            }
          } else {
            errorSound.play();
          }
          responseHeader.textContent = hdr;
          if(hdr.trim() !== "") { copyResponseHeader.style.display = 'block'; }

          if (ctype.includes('application/json')) {
            responseBody.textContent = JSON.stringify(r.data, null, 2);
          }
          else if (ctype.startsWith('image/')) {
            responseBody.innerHTML = '<div class="loading">Memuat gambar...</div>';
            const img = document.createElement('img');
            img.src = r.config.url;
            img.style.maxWidth = '100%';
            img.style.height = 'auto';
            img.onload = function() {
              responseBody.innerHTML = '';
              responseBody.appendChild(img);
            };
            img.onerror = function() {
              responseBody.textContent = 'Image format rusak';
            };
          }
          else if (ctype.startsWith('video/')) {
            responseBody.innerHTML = '<div class="loading">Memuat video...</div>';
            const vid = document.createElement('video');
            vid.src = r.config.url;
            vid.controls = true;
            vid.style.maxWidth = '100%';
            vid.style.height = 'auto';
            vid.onloadeddata = function() {
              responseBody.innerHTML = '';
              responseBody.appendChild(vid);
            };
            vid.onerror = function() {
              responseBody.textContent = 'Video format rusak';
            };
          }
          else {
            responseBody.textContent = r.data;
          }
          if(responseBody.textContent.trim() !== "" && !ctype.startsWith('image/') && !ctype.startsWith('video')) {
            copyResponseBody.style.display = 'block';
          } else {
            copyResponseBody.style.display = 'none';
          }

          let axiosCode;
          if (ctype.includes('application/json')) {
            if (Object.keys(params).length > 0) {
              axiosCode = "axios.get('https://nirkyy.koyeb.app" + baseUrl + "', {\n  params: " + JSON.stringify(params, null, 2) + "\n})\n.then(response => {\n  console.log(response);\n})\n.catch(error => {\n  console.error(error);\n});";
            } else {
              axiosCode = "axios.get('https://nirkyy.koyeb.app" + baseUrl + "')\n.then(response => {\n  console.log(response);\n})\n.catch(error => {\n  console.error(error);\n});";
            }
          } else {
            if (Object.keys(params).length > 0) {
              axiosCode = "axios.get('https://nirkyy.koyeb.app" + baseUrl + "', {\n  params: " + JSON.stringify(params, null, 2) + ",\n  responseType: 'arraybuffer'\n})\n.then(response => {\n  console.log(response);\n})\n.catch(error => {\n  console.error(error);\n});";
            } else {
              axiosCode = "axios.get('https://nirkyy.koyeb.app" + baseUrl + "', { responseType: 'arraybuffer' })\n.then(response => {\n  console.log(response);\n})\n.catch(error => {\n  console.error(error);\n});";
            }
          }
          axiosSnippetPre.innerHTML = '<code>' + axiosCode + '</code>';
          copyAxiosButton.style.display = 'block';
          runButton.disabled = false;
          closeButton.disabled = false;
        })
        .catch(err => {
          loadingIndicator.style.display = 'none';
          errorSound.play();
          if (err.response) {
            let h = 'Status: ' + err.response.status + ' ' + err.response.statusText + '\n';
            Object.entries(err.response.headers).forEach(([k, v]) => { h += k + ': ' + v + '\n'; });
            responseHeader.textContent = h;
            if (typeof err.response.data === 'object') {
              responseBody.textContent = JSON.stringify(err.response.data, null, 2);
            } else {
              responseBody.textContent = err.response.data;
            }
          } else {
            responseHeader.textContent = 'Error: No response';
            responseBody.textContent = err.message;
          }
          if(responseHeader.textContent.trim() !== "") {
            copyResponseHeader.style.display = 'block';
          }
          if(responseBody.textContent.trim() !== "") {
            copyResponseBody.style.display = 'block';
          }
          runButton.disabled = false;
          closeButton.disabled = false;
        });
      });

      copyResponseHeader.addEventListener('click', function() {
        navigator.clipboard.writeText(responseHeader.textContent)
          .then(() => alert('Response Header berhasil di-copy!'))
          .catch(() => alert('Gagal copy Response Header.'));
      });

      copyResponseBody.addEventListener('click', function() {
        navigator.clipboard.writeText(responseBody.textContent)
          .then(() => alert('Response Body berhasil di-copy!'))
          .catch(() => alert('Gagal copy Response Body.'));
      });

      copyEndpointButton.addEventListener('click', function() {
        if (finalApiUrl) {
          navigator.clipboard.writeText(finalApiUrl)
            .then(() => alert('Endpoint berhasil di-copy!'))
            .catch(() => alert('Gagal copy endpoint.'));
        } else {
          alert('Tidak ada endpoint yang dapat di-copy. Jalankan "Try" terlebih dahulu.');
        }
      });

      copyAxiosButton.addEventListener('click', function() {
        const codeText = axiosSnippetPre.textContent;
        navigator.clipboard.writeText(codeText)
          .then(() => alert('Contoh kode Axios berhasil di-copy!'))
          .catch(() => alert('Gagal copy kode Axios.'));
      });

      function searchData(term) {
        if (isFetching) return;
        isFetching = true;
        fetch('/search?term=' + encodeURIComponent(term))
          .then(r => r.text())
          .then(html => { endpointListSection.innerHTML = html; })
          .catch(e => console.error(e))
          .finally(() => { isFetching = false; });
      }

      function renderTags() {
        if (isFetching) return;
        isFetching = true;
        fetch('/renderpage?tags=')
          .then(r => r.text())
          .then(h => {
            const parser = new DOMParser();
            const doc = parser.parseFromString(h, 'text/html');
            const row = doc.querySelector('.row');
            if (row) endpointListSection.innerHTML = row.outerHTML;
          })
          .catch(e => console.error(e))
          .finally(() => { isFetching = false; });
      }

      function loadTags() {
        fetch('/tags')
          .then(res => res.json())
          .then(data => {
            let html = '<a class="dropdown-item" href="#" data-tags="">All</a>';
            data.tags.forEach(tag => {
              html += `<a class="dropdown-item" href="#" data-tags="${tag}">${tag}</a>`;
            });
            tagButtonsContainer.innerHTML = html;
          })
          .catch(console.error);
      }

      searchEndpointInput.addEventListener('input', debounce(function() {
        const s = searchEndpointInput.value.trim();
        if (s) {
          searchData(s);
        } else {
          renderTags();
        }
      }, 300));

      tagButtonsContainer.addEventListener('click', function(e) {
        e.preventDefault();
        const btn = e.target.closest('a');
        if (btn) {
          const tags = btn.getAttribute('data-tags');
          searchEndpointInput.value = '';
          fetch('/renderpage?tags=' + encodeURIComponent(tags))
            .then(r => r.text())
            .then(h => {
              const parser = new DOMParser();
              const doc = parser.parseFromString(h, 'text/html');
              const row = doc.querySelector('.row');
              if (row) endpointListSection.innerHTML = row.outerHTML;
            })
            .catch(e => console.error(e));
        }
      });

      attachCardEvents();
      renderTags();
      loadTags();
    });
  </script>
</body>
</html>