<!DOCTYPE html>
<html lang="id">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>NirKyy - REST API Documentation</title>
    <meta name="google-site-verification" content="J-VFugOfjbkh7eTymofIL-zoG7ne6R91Q-G4gnTEEDw">
    <meta name="description" content="Nirkyy Adalah Web yang menyediakan Kumpulan API gratis untuk kebutuhan bot WhatsApp, telegram, dan Web">
    <meta name="keywords" content="REST API, dokumentasi API, Collection API, NirKyy, endpoint, API documentation, web API, fetch API, coba API">
    <meta name="author" content="NirKyy Developer">
    <meta name="robots" content="index, follow">
    <meta http-equiv="Content-Security-Policy" content="upgrade-insecure-requests">
    <meta property="og:title" content="NirKyy - REST API Documentation">
    <meta property="og:description" content="Nirkyy Adalah Web yang menyediakan Kumpulan API gratis untuk kebutuhan bot WhatsApp, telegram, dan Web">
    <meta property="og:type" content="website">
    <meta property="og:url" content="nirkyy.koyeb.app">
    <meta property="og:image" content="/logo.jpg">
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:title" content="NirKyy - REST API Documentation">
    <meta name="twitter:description" content="Nirkyy Adalah Web yang menyediakan Kumpulan API gratis untuk kebutuhan bot WhatsApp, telegram, dan Web">
    <meta name="twitter:site" content="@NirKyyDev">
    <meta name="twitter:image" content="/logo.jpg">
    <link rel="icon" href="favicon.ico" type="image/x-icon">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <style>
        :root {
            --bg-color: #1a1a1a;
            --text-color: #e0e0e0;
            --accent-color: #00aced;
            --border-color: #444;
            --card-bg-color: #222;
            --code-bg-color: #282c34;
            --hover-bg-color: #333
        }
        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
            background-color: var(--bg-color);
            color: var(--text-color);
            margin: 0;
            padding: 0;
            overflow-x: hidden;
            line-height: 1.6
        }
        header {
            background-color: var(--bg-color);
            padding: 15px 20px;
            border-bottom: 2px solid var(--border-color);
            display: flex;
            align-items: center;
            justify-content: space-between;
            flex-wrap: wrap
        }
        .header-left {
            display: flex;
            align-items: center;
            margin-bottom: 10px
        }
        .header-left img {
            max-height: 60px;
            margin-right: 15px
        }
        .header-title {
            font-size: 1.8rem;
            font-weight: 700;
            margin: 0;
            color: var(--text-color)
        }
        main.container-fluid {
            padding: 25px 20px
        }
        .search-container {
            margin-top: 10px;
            margin-bottom: 30px;
            position: relative;
            text-align: center
        }
        .search-container input[type=text] {
            padding: 12px 40px 12px 15px;
            border: 1px solid var(--border-color);
            background-color: var(--card-bg-color);
            color: var(--text-color);
            border-radius: 25px;
            width: 100%;
            max-width: 600px;
            font-size: 1em;
            transition: border-color .3s ease, box-shadow .3s ease
        }
        .search-container input[type=text]::placeholder {
            color: #888
        }
        .search-container input[type=text]:focus {
            border-color: var(--accent-color);
            box-shadow: 0 0 8px rgba(0, 172, 237, .5);
            outline: 0
        }
        .search-icon {
            position: absolute;
            right: 15px;
            top: 50%;
            transform: translateY(-50%);
            color: var(--accent-color);
            margin-left: auto;
            margin-right: auto;
            left: 0;
            right: 0;
            max-width: 570px;
            pointer-events: none;
            text-align: right
        }
        .dropdown {
            margin: 10px 0
        }
        .dropdown-toggle {
            background-color: transparent;
            color: var(--accent-color);
            border: 1px solid var(--accent-color);
            padding: 8px 15px;
            border-radius: 20px;
            transition: background-color .3s ease, color .3s ease
        }
        .dropdown-toggle:focus,
        .dropdown-toggle:hover {
            background-color: var(--accent-color);
            color: var(--bg-color);
            box-shadow: none
        }
        .dropdown-menu {
            background-color: var(--card-bg-color);
            border: 1px solid var(--border-color);
            border-radius: 8px
        }
        .dropdown-item {
            color: var(--text-color);
            padding: 10px 15px;
            transition: background-color .2s ease, color .2s ease
        }
        .dropdown-item:hover {
            background-color: var(--hover-bg-color);
            color: var(--accent-color)
        }
        #endpointListSection .card {
            border: 1px solid var(--border-color);
            background-color: var(--card-bg-color);
            color: var(--text-color);
            transition: transform .3s ease, box-shadow .3s ease;
            margin-bottom: 20px;
            border-radius: 8px;
            overflow: hidden
        }
        #endpointListSection .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 5px 15px rgba(0, 172, 237, .2);
            border-color: var(--accent-color)
        }
        .card-header {
            background-color: rgba(0, 172, 237, .1);
            color: var(--accent-color);
            border-bottom: 1px solid var(--border-color);
            font-weight: 700;
            padding: .8rem 1.25rem
        }
        .card-body {
            padding: 1.5rem
        }
        .card-body p {
            margin-bottom: .8rem
        }
        .card-body .btn {
            margin-top: 10px;
            margin-right: 5px
        }
        pre {
            white-space: pre-wrap;
            word-wrap: break-word;
            background-color: var(--code-bg-color);
            border: 1px solid var(--border-color);
            padding: 15px;
            border-radius: 5px;
            overflow-x: auto;
            color: #abb2bf;
            font-family: "Fira Code", Consolas, Monaco, "Andale Mono", "Ubuntu Mono", monospace;
            font-size: .9em;
            line-height: 1.5
        }
        .modal {
            display: none;
            position: fixed;
            z-index: 1050;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0, 0, 0, .85)
        }
        .modal-dialog {
            margin: 1.75rem auto;
            max-width: 700px
        }
        .modal-content {
            background-color: var(--card-bg-color);
            color: var(--text-color);
            border: 1px solid var(--border-color);
            border-radius: 10px
        }
        .modal-header {
            padding: 1rem 1.5rem;
            border-bottom: 1px solid var(--border-color);
            display: flex;
            justify-content: space-between;
            align-items: center
        }
        .modal-title {
            color: var(--accent-color);
            font-weight: 700;
            font-size: 1.25rem
        }
        .modal-header .close {
            color: var(--text-color);
            opacity: .7;
            text-shadow: none;
            font-size: 1.5rem
        }
        .modal-header .close:hover {
            color: var(--accent-color);
            opacity: 1
        }
        .modal-body {
            padding: 1.5rem
        }
        .modal-body label {
            font-weight: 700;
            margin-bottom: .5rem;
            display: block
        }
        .modal-body .form-control {
            background-color: var(--bg-color);
            border: 1px solid var(--border-color);
            color: var(--text-color);
            border-radius: 5px
        }
        .modal-body .form-control:focus {
            background-color: var(--bg-color);
            color: var(--text-color);
            border-color: var(--accent-color);
            box-shadow: 0 0 5px rgba(0, 172, 237, .3)
        }
        .modal-footer {
            padding: 1rem 1.5rem;
            border-top: 1px solid var(--border-color)
        }
        footer {
            text-align: center;
            padding: 25px 20px;
            background-color: var(--bg-color);
            color: #aaa;
            border-top: 2px solid var(--border-color);
            margin-top: 40px;
            font-size: .9em
        }
        footer a {
            color: var(--accent-color);
            text-decoration: none;
            margin-left: 5px
        }
        footer a:hover {
            text-decoration: underline
        }
        .axios-code {
            margin-top: 20px
        }
        .modal-section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 8px
        }
        .modal-section-header h5 {
            margin-bottom: 0;
            font-size: 1rem;
            font-weight: 700
        }
        .copy-button {
            background: 0 0;
            border: 1px solid var(--accent-color);
            color: var(--accent-color);
            padding: 3px 8px;
            font-size: .8em;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color .2s ease, color .2s ease;
            display: none
        }
        .copy-button:hover {
            background-color: var(--accent-color);
            color: var(--card-bg-color)
        }
        .copy-button i {
            margin-right: 4px
        }
        .btn {
            font-family: inherit;
            border-radius: 20px;
            padding: 10px 20px;
            font-weight: 700;
            transition: background-color .3s ease, color .3s ease, border-color .3s ease, box-shadow .3s ease
        }
        .btn-info,
        .btn-primary {
            border: 1px solid var(--accent-color);
            background-color: var(--accent-color);
            color: var(--bg-color)
        }
        .btn-info:focus,
        .btn-info:hover,
        .btn-primary:focus,
        .btn-primary:hover {
            background-color: var(--bg-color);
            color: var(--accent-color);
            border-color: var(--accent-color);
            box-shadow: 0 0 8px rgba(0, 172, 237, .4)
        }
        .btn-outline-info {
            border: 1px solid var(--accent-color);
            color: var(--accent-color);
            background-color: transparent
        }
        .btn-outline-info:focus,
        .btn-outline-info:hover {
            background-color: var(--accent-color);
            color: var(--bg-color);
            box-shadow: 0 0 8px rgba(0, 172, 237, .4)
        }
        .loading {
            text-align: center;
            margin: 30px auto;
            color: var(--accent-color)
        }
        .gear {
            font-size: 2.5em;
            margin: 0 10px;
            display: inline-block;
            color: var(--accent-color)
        }
        .gear1 {
            animation: rotate-clockwise 1.5s linear infinite
        }
        .gear2 {
            animation: rotate-counterclockwise 1.5s linear infinite
        }
        @keyframes rotate-clockwise {
            from {
                transform: rotate(0)
            }
            to {
                transform: rotate(360deg)
            }
        }
        @keyframes rotate-counterclockwise {
            from {
                transform: rotate(0)
            }
            to {
                transform: rotate(-360deg)
            }
        }
        #whatsappModal .modal-content {
            text-align: center;
            padding: 2rem
        }
        #whatsappModal .modal-title {
            font-size: 1.5rem;
            margin-bottom: 1rem;
            width: 100%;
            text-align: center
        }
        #whatsappModal .modal-body {
            font-size: 1.05rem;
            margin-bottom: 1.5rem
        }
        #whatsappModal .modal-footer {
            border-top: none;
            justify-content: center
        }
        #whatsappModal .modal-header {
            border-bottom: none;
            padding-bottom: 0
        }
        #whatsappModal .close {
            position: absolute;
            top: 15px;
            right: 20px
        }
        @media (max-width:768px) {
            .header-title {
                font-size: 1.5rem
            }
            main.container-fluid {
                padding: 20px 15px
            }
            .modal-dialog {
                max-width: 90%
            }
        }
        @media (max-width:576px) {
            header {
                padding: 10px 15px;
                flex-direction: column;
                align-items: flex-start
            }
            .header-left {
                margin-bottom: 15px
            }
            .header-title {
                font-size: 1.4rem
            }
            main.container-fluid {
                padding: 15px 10px
            }
            .card-body {
                padding: 1.2rem
            }
            .modal-title {
                font-size: 1.1rem
            }
            .btn {
                padding: 8px 16px;
                font-size: .9rem
            }
            pre {
                padding: 10px;
                font-size: .85em
            }
            .search-container input[type=text] {
                padding: 10px 35px 10px 12px;
                font-size: .95em
            }
        }
    </style>
</head>
<body>
    <header>
        <div class="header-left">
            <img src="/logo.jpg" alt="Logo NirKyy">
            <h1 class="header-title">NirKyy API</h1>
        </div>
        <div class="dropdown">
            <button class="btn dropdown-toggle" type="button" id="dropdownTags" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                <i class="fas fa-tags"></i> Tags
            </button>
            <div class="dropdown-menu" aria-labelledby="dropdownTags" id="tagButtons"></div>
        </div>
    </header>
    <main class="container-fluid">
        <div class="search-container">
            <input type="text" id="searchEndpoint" placeholder="Cari Endpoint atau Tag...">
            <i class="fas fa-search search-icon"></i>
        </div>
        <div id="endpointListSection" class="row"></div>
    </main>
    <footer>
        <p>© 2025 NirKyy. API Bakal tetep aktif selama Koyeb gratis 🗿🙏 | Join Saluran<a href="https://whatsapp.com/channel/0029Vb3qLJRDuMRdjacRwe2T" target="_blank" rel="noopener noreferrer">WhatsApp</a></p>
    </footer>
    <div id="tryModal" class="modal" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Coba Endpoint</h5>
                    <button type="button" class="close" id="closeButton" aria-label="Close">
                        <span aria-hidden="true">×</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div id="parameterInputs"></div>
                    <button id="runButton" class="btn btn-info btn-block mt-3 mb-3">
                        <i class="fas fa-play"></i>Run
                    </button>
                    <div id="loadingIndicator" class="loading" style="display:none">
                        <i class="fas fa-cog gear gear1"></i>
                        <i class="fas fa-cog gear gear2"></i>
                        <span>Memproses...</span>
                    </div>
                    <div id="apiResponse" class="mt-3">
                        <div class="modal-section-header">
                            <h5>Response Header:</h5>
                            <button id="copyResponseHeader" class="copy-button">
                                <i class="fas fa-copy"></i>Salin
                            </button>
                        </div>
                        <pre id="responseHeader"></pre>
                        <div class="modal-section-header mt-3">
                            <h5>Response Body:</h5>
                            <button id="copyResponseBody" class="copy-button">
                                <i class="fas fa-copy"></i>Salin
                            </button>
                        </div>
                        <pre id="responseBody"></pre>
                        <div class="modal-section-header mt-3">
                            <h5>Endpoint URL:</h5>
                            <button id="copyEndpointButton" class="copy-button">
                                <i class="fas fa-copy"></i>Salin
                            </button>
                        </div>
                        <pre id="finalUrlDisplay" style="font-size:.85em;word-break:break-all;display:none"></pre>
                    </div>
                    <div class="axios-code mt-3">
                        <div class="modal-section-header">
                            <h5>Contoh Kode Axios (GET):</h5>
                            <button id="copyAxiosButton" class="copy-button">
                                <i class="fas fa-copy"></i>Salin
                            </button>
                        </div>
                        <pre id="axiosSnippet"><code></code></pre>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div id="whatsappModal" class="modal" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"><i class="fab fa-whatsapp"></i>Gabung Saluran WhatsApp!</h5>
                    <button type="button" class="close" id="closeWhatsAppModal" aria-label="Close">
                        <span aria-hidden="true">×</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>Dapatkan update API terbaru dan diskusi seru seputar NirKyy. Yuk, gabung ke saluran WhatsApp kami!</p>
                </div>
                <div class="modal-footer">
                    <a href="https://whatsapp.com/channel/0029Vb3qLJRDuMRdjacRwe2T" target="_blank" rel="noopener noreferrer" class="btn btn-primary">Gabung Sekarang</a>
                </div>
            </div>
        </div>
    </div>
    <audio id="successSound" src="success.mp3" preload="auto"></audio>
    <audio id="errorSound" src="error.mp3" preload="auto"></audio>
    <script src="https://code.jquery.com/jquery-3.5.1.min.js" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js" defer="defer"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js" defer="defer"></script>
    <script>
    document.addEventListener('DOMContentLoaded', function() {
        let finalApiUrl = '';
        let isFetching = false;

        const endpointListSection = document.getElementById('endpointListSection');
        const searchEndpointInput = document.getElementById('searchEndpoint');
        const tagButtonsContainer = document.getElementById('tagButtons');
        const tryModal = document.getElementById('tryModal');
        const closeButton = document.getElementById('closeButton');
        const parameterInputsDiv = document.getElementById('parameterInputs');
        const runButton = document.getElementById('runButton');
        const responseHeaderPre = document.getElementById('responseHeader');
        const responseBodyPre = document.getElementById('responseBody');
        const axiosSnippetPre = document.getElementById('axiosSnippet').querySelector('code');
        const loadingIndicator = document.getElementById('loadingIndicator');
        const successSound = document.getElementById('successSound');
        const errorSound = document.getElementById('errorSound');
        const copyResponseHeaderBtn = document.getElementById('copyResponseHeader');
        const copyResponseBodyBtn = document.getElementById('copyResponseBody');
        const copyEndpointButtonBtn = document.getElementById('copyEndpointButton');
        const copyAxiosButtonBtn = document.getElementById('copyAxiosButton');
        const finalUrlDisplayPre = document.getElementById('finalUrlDisplay');
        let currentEndpointData = null;

        const whatsappModal = document.getElementById('whatsappModal');
        const closeWhatsAppModal = document.getElementById('closeWhatsAppModal');
        if (typeof $ !== 'undefined' && typeof $.fn.modal !== 'undefined') {
            $('#whatsappModal').modal('show');
        } else {
            whatsappModal.style.display = 'block';
        }

        closeWhatsAppModal.addEventListener('click', function() {
             if (typeof $ !== 'undefined' && typeof $.fn.modal !== 'undefined') {
                $('#whatsappModal').modal('hide');
            } else {
                whatsappModal.style.display = 'none';
            }
        });

        function debounce(func, wait) {
            let timeout;
            return function(...args) {
                clearTimeout(timeout);
                timeout = setTimeout(() => func.apply(this, args), wait);
            };
        }

        function attachCardEvents() {
            endpointListSection.addEventListener('click', function handleCardClick(e) {
                const btn = e.target.closest('button');
                if (!btn) return;

                if (btn.classList.contains('copy-url-button')) {
                    const urlToCopy = btn.getAttribute('data-url');
                    if (urlToCopy) {
                        navigator.clipboard.writeText(urlToCopy)
                            .then(() => { alert('URL berhasil disalin!'); })
                            .catch(() => { alert('Gagal menyalin URL.'); });
                    }
                }
                else if (btn.classList.contains('try-button')) {
                    const data = btn.getAttribute('data-endpoint');
                    if (data) {
                        try {
                            const endpoint = JSON.parse(data);
                            openTryModal(endpoint);
                        } catch (error) {
                            console.error("Gagal parse data endpoint:", error);
                            alert("Terjadi kesalahan saat membuka modal.");
                        }
                    }
                }
            });
        }

        function openTryModal(endpoint) {
            currentEndpointData = endpoint;
            parameterInputsDiv.innerHTML = '';
            responseHeaderPre.textContent = '';
            responseBodyPre.textContent = '';
            axiosSnippetPre.textContent = '';
            finalUrlDisplayPre.textContent = '';
            finalUrlDisplayPre.style.display = 'none';
            finalApiUrl = '';
            copyResponseHeaderBtn.style.display = 'none';
            copyResponseBodyBtn.style.display = 'none';
            copyEndpointButtonBtn.style.display = 'none';
            copyAxiosButtonBtn.style.display = 'none';
            loadingIndicator.style.display = 'none';
            runButton.disabled = false;
            closeButton.disabled = false;

            if (endpoint.parameter && endpoint.parameter.length > 0) {
                endpoint.parameter.forEach(param => {
                    const paramName = param.params;
                    const defaultValue = param.example || '';
                    const isRequired = (param.opsional === false);
                    const description = param.desc || `Masukkan nilai untuk ${paramName}`;

                    const div = document.createElement('div');
                    div.className = 'form-group mb-3';

                    const label = document.createElement('label');
                    label.htmlFor = `param-${paramName}`;
                    label.textContent = `${paramName}${isRequired ? '*' : ''}:`;

                    const input = document.createElement('input');
                    input.type = 'text';
                    input.className = 'form-control';
                    input.id = `param-${paramName}`;
                    input.name = paramName;
                    input.placeholder = description + (defaultValue ? ` (contoh: ${defaultValue})` : '');
                    input.value = defaultValue; // Set value ke example jika ada
                    if (isRequired) {
                        input.required = true;
                        label.title = "Parameter ini wajib diisi.";
                    } else {
                         label.title = "Parameter ini opsional.";
                    }

                    div.appendChild(label);
                    div.appendChild(input);
                    parameterInputsDiv.appendChild(div);
                });
            } else {
                 parameterInputsDiv.innerHTML = '<p class="text-muted">Endpoint ini tidak memerlukan parameter.</p>';
            }

             if (typeof $ !== 'undefined' && typeof $.fn.modal !== 'undefined') {
                $('#tryModal').modal('show');
             } else {
                tryModal.style.display = 'block';
             }
        }

        window.addEventListener('click', function(event) {
            if (event.target === tryModal && loadingIndicator.style.display !== 'block') {
                closeAndClearModal();
            }
        });

        closeButton.addEventListener('click', function() {
            if (loadingIndicator.style.display !== 'block') {
                closeAndClearModal();
            }
        });

        function closeAndClearModal() {
            if (typeof $ !== 'undefined' && typeof $.fn.modal !== 'undefined') {
                $('#tryModal').modal('hide');
            } else {
                tryModal.style.display = 'none';
            }
            clearModalData();
        }

        function clearModalData() {
            responseHeaderPre.textContent = '';
            responseBodyPre.textContent = '';
            axiosSnippetPre.textContent = '';
            finalUrlDisplayPre.textContent = '';
            finalUrlDisplayPre.style.display = 'none';
            finalApiUrl = '';
            copyResponseHeaderBtn.style.display = 'none';
            copyResponseBodyBtn.style.display = 'none';
            copyEndpointButtonBtn.style.display = 'none';
            copyAxiosButtonBtn.style.display = 'none';
            currentEndpointData = null;
        }

        runButton.addEventListener('click', function() {
            if (loadingIndicator.style.display === 'block' || !currentEndpointData) return;

            runButton.disabled = true;
            closeButton.disabled = true;
            loadingIndicator.style.display = 'block';
            responseHeaderPre.textContent = '';
            responseBodyPre.textContent = '';
            axiosSnippetPre.textContent = '';
            finalUrlDisplayPre.textContent = '';
            finalUrlDisplayPre.style.display = 'none';
            copyResponseHeaderBtn.style.display = 'none';
            copyResponseBodyBtn.style.display = 'none';
            copyEndpointButtonBtn.style.display = 'none';
            copyAxiosButtonBtn.style.display = 'none';

            let apiUrlTemplate = currentEndpointData.endpoint;
            const queryParams = {};
            let missingRequired = false;
            let firstMissingField = null;

            const inputs = parameterInputsDiv.querySelectorAll('input.form-control');
            inputs.forEach(input => {
                const paramName = input.name;
                const definition = currentEndpointData.parameter.find(p => p.params === paramName);
                const isRequired = definition && (definition.opsional === false);
                const value = input.value.trim();

                 if (isRequired && !value) {
                    missingRequired = true;
                    input.classList.add('is-invalid');
                    if (!firstMissingField) firstMissingField = input;
                 } else {
                    input.classList.remove('is-invalid');
                 }

                if (value) {
                    const placeholder = `{${paramName}}`;
                    if (apiUrlTemplate.includes(placeholder)) {
                        apiUrlTemplate = apiUrlTemplate.replace(placeholder, encodeURIComponent(value));
                    } else {
                        queryParams[paramName] = value;
                    }
                }
            });

            if (missingRequired) {
                alert('Harap isi semua parameter wajib (*).');
                if (firstMissingField) firstMissingField.focus();
                loadingIndicator.style.display = 'none';
                runButton.disabled = false;
                closeButton.disabled = false;
                return;
            }

            try {
                 const urlObj = new URL(apiUrlTemplate, window.location.origin);
                 Object.entries(queryParams).forEach(([key, value]) => {
                     urlObj.searchParams.append(key, value);
                 });
                 finalApiUrl = urlObj.pathname + urlObj.search;
            } catch (e) {
                 console.error("Error creating URL:", e);
                 alert("Terjadi kesalahan saat membuat URL endpoint.");
                 loadingIndicator.style.display = 'none';
                 runButton.disabled = false;
                 closeButton.disabled = false;
                 return;
            }

            finalUrlDisplayPre.textContent = finalApiUrl;
            finalUrlDisplayPre.style.display = 'block';
            if (finalApiUrl) { copyEndpointButtonBtn.style.display = 'inline-block'; }

            axios.get(finalApiUrl)
                .then(response => {
                    loadingIndicator.style.display = 'none';

                    let headersText = `Status: ${response.status} ${response.statusText}\n`;
                    Object.entries(response.headers).forEach(([key, value]) => {
                        headersText += `${key}: ${value}\n`;
                    });
                    responseHeaderPre.textContent = headersText.trim();
                    if (responseHeaderPre.textContent) copyResponseHeaderBtn.style.display = 'inline-block';

                    const contentType = response.headers['content-type'] || '';

                    if (response.status >= 200 && response.status < 300 && (!response.data || response.data.success !== false)) {
                        successSound.play().catch(e => console.warn("Gagal memainkan suara sukses:", e));
                    } else {
                        errorSound.play().catch(e => console.warn("Gagal memainkan suara error:", e));
                    }

                    responseBodyPre.innerHTML = '';
                    if (contentType.includes('application/json')) {
                        responseBodyPre.textContent = JSON.stringify(response.data, null, 2);
                    } else if (contentType.startsWith('image/')) {
                        responseBodyPre.innerHTML = '<div class="loading">Memuat gambar...</div>';
                        const img = document.createElement('img');
                        img.src = response.config.url;
                        img.style.maxWidth = '100%';
                        img.style.height = 'auto';
                        img.style.display = 'block';
                        img.style.marginTop = '10px';
                        img.onload = () => { responseBodyPre.innerHTML = ''; responseBodyPre.appendChild(img); };
                        img.onerror = () => { responseBodyPre.textContent = 'Gagal memuat gambar (format rusak atau URL tidak valid).'; };
                    } else if (contentType.startsWith('video/')) {
                         responseBodyPre.innerHTML = '<div class="loading">Memuat video...</div>';
                         const vid = document.createElement('video');
                         vid.src = response.config.url;
                         vid.controls = true;
                         vid.style.maxWidth = '100%';
                         vid.style.height = 'auto';
                         vid.style.display = 'block';
                         vid.style.marginTop = '10px';
                         vid.onloadeddata = () => { responseBodyPre.innerHTML = ''; responseBodyPre.appendChild(vid); };
                         vid.onerror = () => { responseBodyPre.textContent = 'Gagal memuat video (format rusak atau URL tidak valid).'; };
                    } else if (contentType.startsWith('text/')) {
                         responseBodyPre.textContent = response.data;
                    }
                    else {
                         if (typeof response.data === 'string' || typeof response.data === 'number') {
                            responseBodyPre.textContent = response.data;
                         } else {
                             responseBodyPre.textContent = `Tipe konten tidak didukung untuk pratinjau: ${contentType}\n\nData diterima (JSON): ${JSON.stringify(response.data, null, 2)}`;
                         }
                    }

                     if (responseBodyPre.textContent.trim() && !contentType.startsWith('image/') && !contentType.startsWith('video/')) {
                         copyResponseBodyBtn.style.display = 'inline-block';
                    }

                    let axiosCode = '';
                    const requestUrl = window.location.origin + finalApiUrl;
                    const axiosOptions = {};

                    if (!contentType.includes('application/json') && !contentType.startsWith('text/')) {
                         axiosOptions.responseType = 'arraybuffer';
                    }

                    const optionsString = Object.keys(axiosOptions).length > 0 ? `, ${JSON.stringify(axiosOptions)}` : '';

                    axiosCode = `axios.get('${requestUrl}'${optionsString})\n` +
                                `.then(response => {\n` +
                                `  console.log('Success:', response.data);\n` +
                                `})\n` +
                                `.catch(error => {\n` +
                                `  console.error('Error:', error.response ? error.response.data : error.message);\n` +
                                `});`;

                    axiosSnippetPre.textContent = axiosCode;
                    if (axiosSnippetPre.textContent) copyAxiosButtonBtn.style.display = 'inline-block';

                })
                .catch(error => {
                    loadingIndicator.style.display = 'none';
                    errorSound.play().catch(e => console.warn("Gagal memainkan suara error:", e));

                    if (error.response) {
                        let errorHeadersText = `Status: ${error.response.status} ${error.response.statusText}\n`;
                        Object.entries(error.response.headers).forEach(([key, value]) => {
                            errorHeadersText += `${key}: ${value}\n`;
                        });
                        responseHeaderPre.textContent = errorHeadersText.trim();

                        const errorContentType = error.response.headers['content-type'] || '';
                         if (errorContentType.includes('application/json')) {
                            responseBodyPre.textContent = JSON.stringify(error.response.data, null, 2);
                        } else if (typeof error.response.data === 'string') {
                            responseBodyPre.textContent = error.response.data;
                        } else {
                             responseBodyPre.textContent = `Error ${error.response.status}. Response tidak dapat ditampilkan sebagai teks.`;
                        }
                    } else if (error.request) {
                        responseHeaderPre.textContent = 'Error: No Response Received';
                        responseBodyPre.textContent = 'Tidak ada respons dari server. Periksa koneksi internet atau URL endpoint.';
                        console.error('Network Error:', error.request);
                    } else {
                        responseHeaderPre.textContent = 'Error: Request Setup Failed';
                        responseBodyPre.textContent = `Gagal membuat request: ${error.message}`;
                        console.error('Request Setup Error:', error.message);
                    }
                     if (responseHeaderPre.textContent) copyResponseHeaderBtn.style.display = 'inline-block';
                     if (responseBodyPre.textContent) copyResponseBodyBtn.style.display = 'inline-block';
                })
                .finally(() => {
                    runButton.disabled = false;
                    closeButton.disabled = false;
                });
        });

        function copyToClipboard(text, buttonElement, successMessage) {
             if (!text) return;
             navigator.clipboard.writeText(text)
                 .then(() => {
                    const originalText = buttonElement.innerHTML;
                    buttonElement.innerHTML = '<i class="fas fa-check"></i> Tersalin!';
                    buttonElement.disabled = true;
                    setTimeout(() => {
                        buttonElement.innerHTML = originalText;
                        buttonElement.disabled = false;
                    }, 1500);
                 })
                 .catch(err => {
                     console.error('Gagal menyalin:', err);
                     alert('Gagal menyalin ke clipboard.');
                 });
        }

        copyResponseHeaderBtn.addEventListener('click', function() {
            copyToClipboard(responseHeaderPre.textContent, this, 'Response Header berhasil disalin!');
        });

        copyResponseBodyBtn.addEventListener('click', function() {
            copyToClipboard(responseBodyPre.textContent, this, 'Response Body berhasil disalin!');
        });

        copyEndpointButtonBtn.addEventListener('click', function() {
             copyToClipboard(finalUrlDisplayPre.textContent, this, 'Endpoint URL berhasil disalin!');
        });

        copyAxiosButtonBtn.addEventListener('click', function() {
             copyToClipboard(axiosSnippetPre.textContent, this, 'Contoh kode Axios berhasil disalin!');
        });

         function fetchData(url) {
             if (isFetching) return Promise.reject("Fetch sedang berlangsung");
             isFetching = true;
             endpointListSection.innerHTML = '<div class="loading"><i class="fas fa-spinner fa-spin"></i> Memuat data...</div>';
             return fetch(url)
                 .then(response => {
                     if (!response.ok) {
                         throw new Error(`HTTP error! status: ${response.status}`);
                     }
                     return response.text();
                 })
                 .then(html => {
                     const parser = new DOMParser();
                     const doc = parser.parseFromString(html, 'text/html');
                     const newContent = doc.body.innerHTML;
                     if (newContent) {
                         endpointListSection.innerHTML = newContent;
                     } else {
                          endpointListSection.innerHTML = '<p class="text-center text-muted">Tidak ada endpoint ditemukan.</p>';
                     }
                 })
                 .catch(error => {
                     console.error("Gagal fetch data:", error);
                     endpointListSection.innerHTML = `<p class="text-center text-danger">Gagal memuat data endpoint. Silakan coba lagi nanti. (${error.message})</p>`;
                 })
                 .finally(() => {
                     isFetching = false;
                 });
         }

        function searchData(term) {
             const searchUrl = `/search?term=${encodeURIComponent(term)}`;
             fetchData(searchUrl);
        }

        function renderEndpointsByTag(tag = '') {
            const renderUrl = `/renderpage?tags=${encodeURIComponent(tag)}`;
            fetchData(renderUrl);
        }

         function loadTags() {
            fetch('/tags')
                .then(res => {
                    if (!res.ok) throw new Error(`HTTP error! status: ${res.status}`);
                    return res.json();
                })
                .then(data => {
                    if (!data || !Array.isArray(data.tags)) throw new Error("Format data tags tidak valid");

                    let html = '<a class="dropdown-item" href="#" data-tags="">Semua Kategori</a>';
                    data.tags.forEach(tag => {
                         const sanitizedTag = tag.replace(/</g, "<").replace(/>/g, ">");
                        html += `<a class="dropdown-item" href="#" data-tags="${encodeURIComponent(sanitizedTag)}">${sanitizedTag}</a>`;
                    });
                    tagButtonsContainer.innerHTML = html;
                })
                .catch(error => {
                     console.error("Gagal memuat tags:", error);
                     tagButtonsContainer.innerHTML = '<span class="dropdown-item text-danger">Gagal memuat tags</span>';
                });
        }

        searchEndpointInput.addEventListener('input', debounce(function() {
            const searchTerm = searchEndpointInput.value.trim();
            if (searchTerm) {
                searchData(searchTerm);
            } else {
                renderEndpointsByTag();
            }
        }, 350));


        tagButtonsContainer.addEventListener('click', function(e) {
            e.preventDefault();
            const link = e.target.closest('a.dropdown-item');
            if (link && link.hasAttribute('data-tags')) {
                const selectedTag = decodeURIComponent(link.getAttribute('data-tags'));
                searchEndpointInput.value = '';
                renderEndpointsByTag(selectedTag);

                if (typeof $ !== 'undefined' && typeof $.fn.dropdown !== 'undefined') {
                     setTimeout(() => {
                        $('#dropdownTags').dropdown('toggle');
                     }, 100);
                }
            }
        });

        attachCardEvents();
        renderEndpointsByTag();
        loadTags();
    });
    </script>
</body>
</html>