<!DOCTYPE html>
<html lang="id">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>NirKyy - REST API Documentation</title>
  <meta name="description" content="Nirkyy Adalah Web yang menyediakan Kumpulan API gratis untuk kebutuhan bot WhatsApp, telegram, dan Web">
  <meta name="keywords" content="REST API, dokumentasi API, Collection API, NirKyy, endpoint, API documentation, web API, fetch API, coba API">
  <meta name="author" content="NirKyy Developer">
  <meta name="robots" content="index, follow">
  <meta http-equiv="Content-Security-Policy" content="upgrade-insecure-requests">
  <meta property="og:title" content="NirKyy - REST API Documentation">
  <meta property="og:description" content="Nirkyy Adalah Web yang menyediakan Kumpulan API gratis untuk kebutuhan bot WhatsApp, telegram, dan Web">
  <meta property="og:type" content="website">
  <meta property="og:url" content="nirkyy.koyeb.app">
  <meta property="og:image" content="/logo.jpg">
  <meta name="twitter:card" content="summary_large_image">
  <meta name="twitter:title" content="NirKyy - REST API Documentation">
  <meta name="twitter:description" content="Nirkyy Adalah Web yang menyediakan Kumpulan API gratis untuk kebutuhan bot WhatsApp, telegram, dan Web">
  <meta name="twitter:site" content="@NirKyyDev">
  <meta name="twitter:image" content="/logo.jpg">
  <link rel="icon" href="/favicon.ico" type="image/x-icon">
  <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" integrity="sha512-iecdLmaskl7CVkqkXNQ/ZH/XLlvWZOJyj7Yy7tcenmpD1ypASozpmT/E0iPtmFIB46ZmdtAc9eNBvH0H/ZpiBw==" crossorigin="anonymous" referrerpolicy="no-referrer" />

  <style>
    :root {
      --bg-color: #111111;
      --text-color: #cccccc;
      --accent-color: #00aced;
      --border-color: #333333;
      --card-bg-color: #1a1a1a;
      --code-bg-color: #2a2a2a;
      --modal-bg-color: rgba(0, 0, 0, 0.7);
      --success-color: #28a745;
      --error-color: #dc3545;
      --button-text-color: #ffffff;
    }

    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    body {
      font-family: 'Open Sans', sans-serif;
      background-color: var(--bg-color);
      color: var(--text-color);
      line-height: 1.6;
      font-size: 16px;
    }

    img {
        max-width: 100%;
        height: auto;
        display: block;
    }

    a {
      color: var(--accent-color);
      text-decoration: none;
      transition: color 0.3s ease;
    }

    a:hover {
      color: #ffffff;
    }

    button {
        font-family: inherit;
        cursor: pointer;
        border: none;
        border-radius: 5px;
        padding: 8px 15px;
        transition: background-color 0.3s ease, box-shadow 0.3s ease;
    }

    button:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }

    input[type="text"] {
        font-family: inherit;
        padding: 10px;
        border: 1px solid var(--border-color);
        background-color: var(--card-bg-color);
        color: var(--text-color);
        border-radius: 5px;
        width: 100%;
        font-size: 1em;
    }

    input[type="text"]:focus {
        outline: none;
        border-color: var(--accent-color);
        box-shadow: 0 0 5px var(--accent-color);
    }

    pre {
      background-color: var(--code-bg-color);
      border: 1px solid var(--border-color);
      padding: 15px;
      border-radius: 5px;
      overflow-x: auto;
      white-space: pre-wrap;
      word-wrap: break-word;
      color: var(--text-color);
      font-size: 0.9em;
      position: relative; /* For copy button positioning */
    }

    code {
        font-family: monospace;
    }

    .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 20px;
    }

    /* Header */
    .site-header {
      background-color: var(--bg-color);
      padding: 10px 0;
      border-bottom: 2px solid var(--border-color);
    }

    .header-content {
      display: flex;
      justify-content: space-between;
      align-items: center;
      flex-wrap: wrap;
      gap: 15px;
    }

    .header-left {
      display: flex;
      align-items: center;
      gap: 15px;
    }

    .header-logo {
      max-height: 50px;
      width: auto;
    }

    .header-title {
      font-size: 1.8rem;
      font-weight: 700;
      color: #ffffff;
      margin: 0;
    }

    .header-nav {
        position: relative;
    }

    .tags-dropdown-button {
        background-color: var(--accent-color);
        color: var(--button-text-color);
        font-weight: 600;
    }

    .tags-dropdown-button:hover {
        background-color: #008fbd;
    }

    .tags-dropdown-menu {
        display: none;
        position: absolute;
        right: 0;
        top: 100%;
        background-color: var(--card-bg-color);
        border: 1px solid var(--border-color);
        border-radius: 5px;
        padding: 5px 0;
        min-width: 150px;
        z-index: 100;
        margin-top: 5px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
    }

    .tags-dropdown-menu.show {
        display: block;
    }

    .tags-dropdown-menu a {
        display: block;
        padding: 8px 15px;
        color: var(--text-color);
        white-space: nowrap;
    }

    .tags-dropdown-menu a:hover {
        background-color: var(--border-color);
        color: #ffffff;
    }

    /* Main Content */
    .main-content {
      padding: 30px 0;
    }

    .search-container {
      margin-bottom: 30px;
      position: relative;
    }

    .search-container input {
        padding-right: 40px; /* Space for icon */
    }

    .search-container .search-icon {
        position: absolute;
        top: 50%;
        right: 15px;
        transform: translateY(-50%);
        color: var(--accent-color);
    }

    /* Endpoint List */
    #endpointListSection {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 20px;
    }

    .endpoint-card {
      background-color: var(--card-bg-color);
      border: 1px solid var(--border-color);
      border-radius: 8px;
      overflow: hidden;
      transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

    .endpoint-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 8px 15px rgba(0, 172, 237, 0.1);
      border-color: var(--accent-color);
    }

    .card-header {
      background-color: var(--border-color);
      padding: 10px 15px;
      font-weight: 600;
      color: var(--accent-color);
      font-size: 0.9em;
      text-transform: uppercase;
    }

    .card-body {
      padding: 15px;
    }

    .card-title {
      font-size: 1.3rem;
      margin-bottom: 10px;
      color: #ffffff;
    }

    .card-description {
      font-size: 0.95em;
      margin-bottom: 15px;
    }

    .card-path {
      font-size: 0.9em;
      margin-bottom: 15px;
      word-break: break-all;
    }

    .card-path code {
        background-color: var(--code-bg-color);
        padding: 3px 6px;
        border-radius: 3px;
    }

    .card-actions {
      display: flex;
      gap: 10px;
      margin-top: 15px;
      flex-wrap: wrap;
    }

    .btn-primary {
        background-color: var(--accent-color);
        color: var(--button-text-color);
        font-weight: 600;
    }
    .btn-primary:hover {
        background-color: #008fbd;
    }

    .btn-secondary {
        background-color: var(--border-color);
        color: var(--text-color);
    }
    .btn-secondary:hover {
        background-color: #444444;
    }

    .btn-copy {
        position: absolute;
        top: 10px;
        right: 10px;
        background-color: rgba(255, 255, 255, 0.1);
        color: var(--text-color);
        border: 1px solid var(--border-color);
        padding: 3px 8px;
        font-size: 0.8em;
        border-radius: 3px;
        opacity: 0;
        transition: opacity 0.3s ease, background-color 0.3s ease;
    }

    pre:hover .btn-copy {
        opacity: 1;
    }

    .btn-copy:hover {
        background-color: rgba(255, 255, 255, 0.2);
    }
    .btn-copy:active {
        background-color: rgba(255, 255, 255, 0.3);
    }

    /* Modal Styles */
    .modal {
      display: none;
      position: fixed;
      z-index: 1050;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      overflow-x: hidden;
      overflow-y: auto;
      background-color: var(--modal-bg-color);
      align-items: center; /* Vertical center */
      justify-content: center; /* Horizontal center */
    }
    .modal.show {
        display: flex;
    }

    .modal-dialog {
        background-color: var(--bg-color);
        border: 1px solid var(--border-color);
        border-radius: 8px;
        width: 90%;
        max-width: 700px;
        margin: 20px auto; /* Fallback margin */
        box-shadow: 0 5px 15px rgba(0,0,0,0.5);
        display: flex;
        flex-direction: column;
        max-height: calc(100vh - 40px); /* Limit height */
    }

    .modal-header {
        padding: 15px 20px;
        border-bottom: 1px solid var(--border-color);
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .modal-title {
        font-size: 1.4rem;
        font-weight: 600;
        color: var(--accent-color);
    }

    .modal-close-button {
        background: none;
        border: none;
        font-size: 1.8rem;
        color: var(--text-color);
        opacity: 0.7;
        padding: 0 5px;
    }
    .modal-close-button:hover {
        opacity: 1;
    }
    .modal-close-button:disabled {
        opacity: 0.3;
        cursor: not-allowed;
    }

    .modal-body {
        padding: 20px;
        overflow-y: auto; /* Scrollable body */
        flex-grow: 1;
    }

    .modal-footer {
        padding: 15px 20px;
        border-top: 1px solid var(--border-color);
        text-align: right;
    }

    #parameterInputs .form-group {
        margin-bottom: 15px;
    }
    #parameterInputs label {
        display: block;
        margin-bottom: 5px;
        font-weight: 600;
        font-size: 0.95em;
    }
    #parameterInputs label .required {
        color: var(--error-color);
        font-weight: bold;
    }
    #parameterInputs label .optional {
        font-style: italic;
        color: #aaa;
    }

    #runButton {
        width: 100%;
        padding: 12px;
        font-size: 1.1em;
        margin-bottom: 20px;
    }

    .loading-indicator {
        text-align: center;
        padding: 20px 0;
    }
    .loading-indicator .gear {
      font-size: 2.5em;
      margin: 0 8px;
      display: inline-block;
      color: var(--accent-color);
    }
    .gear1 { animation: rotate-clockwise 1.5s linear infinite; }
    .gear2 { animation: rotate-counterclockwise 1.5s linear infinite; }

    @keyframes rotate-clockwise {
      from { transform: rotate(0deg); }
      to { transform: rotate(360deg); }
    }
    @keyframes rotate-counterclockwise {
      from { transform: rotate(0deg); }
      to { transform: rotate(-360deg); }
    }

    #apiResponse h5 {
        font-size: 1.1rem;
        margin-top: 20px;
        margin-bottom: 8px;
        color: #ffffff;
    }

    #responseBody img,
    #responseBody video,
    #responseBody audio {
        max-width: 100%;
        height: auto;
        margin-top: 10px;
        border: 1px solid var(--border-color);
        border-radius: 4px;
    }
    #responseBody audio {
        width: 100%;
    }

    #axiosExample {
        margin-top: 20px;
    }

    /* WhatsApp Modal Specific Styles */
    #whatsappModal .modal-dialog {
        max-width: 500px;
    }
    #whatsappModal .modal-body {
        text-align: center;
    }
    #whatsappModal .fab.fa-whatsapp {
        font-size: 3em;
        color: #25D366;
        margin-bottom: 15px;
    }
    #whatsappModal .modal-footer {
        justify-content: center;
        border-top: none;
    }
    #whatsappModal .btn-whatsapp {
        background-color: #25D366;
        color: white;
        font-weight: 600;
    }
    #whatsappModal .btn-whatsapp:hover {
        background-color: #1EAE54;
    }


    /* Footer */
    .site-footer {
      text-align: center;
      padding: 25px 20px;
      margin-top: 40px;
      background-color: var(--card-bg-color);
      color: var(--text-color);
      font-size: 0.9em;
      border-top: 2px solid var(--border-color);
    }

    .site-footer p {
      margin: 0;
    }

    /* Responsive Adjustments */
    @media (max-width: 768px) {
        .header-content {
            flex-direction: column;
            align-items: flex-start;
        }
        .header-nav {
            width: 100%;
            display: flex;
            justify-content: flex-end; /* Align button to the right */
        }
        .tags-dropdown-menu {
            width: auto; /* Let it size based on content */
            min-width: 200px; /* Ensure decent width */
        }
        .header-title {
            font-size: 1.5rem;
        }
        .modal-dialog {
            width: 95%;
            margin: 10px auto;
            max-height: calc(100vh - 20px);
        }
        #endpointListSection {
            grid-template-columns: 1fr; /* Single column on mobile */
        }
    }

  </style>
</head>
<body>

  <header class="site-header">
    <div class="container header-content">
      <div class="header-left">
        <img src="/logo.jpg" alt="NirKyy Logo" class="header-logo">
        <h1 class="header-title">NirKyy</h1>
      </div>
      <nav class="header-nav">
        <button type="button" class="tags-dropdown-button" id="tagsDropdownToggle">
          <i class="fas fa-bars"></i> Tags
        </button>
        <div class="tags-dropdown-menu" id="tagButtons">
        </div>
      </nav>
    </div>
  </header>

  <main class="main-content container">
    <div class="search-container">
      <input type="text" id="searchEndpoint" placeholder="Cari Endpoint atau Tag...">
      <i class="fas fa-search search-icon"></i>
    </div>

    <div id="endpointListSection">
       <div class="loading-indicator">
          <i class="fas fa-cog gear gear1"></i>
          <i class="fas fa-cog gear gear2"></i>
          <span>Memuat endpoint...</span>
       </div>
    </div>
  </main>

  <footer class="site-footer">
    <p>© 2025 NirKyy. API akan tetap aktif selama Koyeb gratis | Join Saluran <a href="https://whatsapp.com/channel/0029Vb3qLJRDuMRdjacRwe2T" target="_blank" rel="noopener noreferrer">WhatsApp</a></p>
  </footer>

  <div id="tryModal" class="modal" role="dialog" aria-labelledby="tryModalTitle" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="tryModalTitle">Coba Endpoint</h5>
          <button type="button" class="modal-close-button" id="closeTryModalButton" aria-label="Close">×</button>
        </div>
        <div class="modal-body">
          <div id="parameterInputs"></div>
          <button id="runButton" class="btn-primary" type="button"><i class="fas fa-play"></i> Jalankan</button>
          <div id="loadingIndicator" class="loading-indicator" style="display:none;">
            <i class="fas fa-cog gear gear1"></i>
            <i class="fas fa-cog gear gear2"></i>
          </div>
          <div id="apiResponse" style="display: none;">
            <div style="position:relative">
              <h5>Endpoint URL:</h5>
              <button class="btn-copy" id="copyEndpointButton" aria-label="Salin Endpoint URL" style="display:none;"><i class="fas fa-copy"></i> Salin</button>
              <pre id="executedUrl"></pre>
            </div>
             <div style="position:relative">
                <h5>Response Header:</h5>
                <button class="btn-copy" id="copyResponseHeader" aria-label="Salin Response Header" style="display:none;"><i class="fas fa-copy"></i> Salin</button>
                <pre id="responseHeader"></pre>
            </div>
            <div style="position:relative">
                <h5>Response Body:</h5>
                <button class="btn-copy" id="copyResponseBody" aria-label="Salin Response Body" style="display:none;"><i class="fas fa-copy"></i> Salin</button>
                <pre id="responseBody"></pre>
            </div>
          </div>
          <div id="axiosExample" style="display: none;">
            <div style="position:relative">
              <h5>Contoh Kode Axios (GET):</h5>
              <button class="btn-copy" id="copyAxiosButton" aria-label="Salin Kode Axios" style="display:none;"><i class="fas fa-copy"></i> Salin</button>
              <pre id="axiosSnippet"><code></code></pre>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div id="whatsappModal" class="modal" role="dialog" aria-labelledby="whatsappModalTitle" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="whatsappModalTitle">
             <i class="fab fa-whatsapp" style="color: #25D366; margin-right: 8px;"></i> Bergabung dengan Kami!
          </h5>
          <button type="button" class="modal-close-button" id="closeWhatsAppModal" aria-label="Close">×</button>
        </div>
        <div class="modal-body">
          <p style="font-size:1.1rem; margin-bottom: 20px;">Dapatkan update API terbaru dan diskusi seru seputar NirKyy. Yuk, gabung ke saluran WhatsApp kami!</p>
          <a href="https://whatsapp.com/channel/0029Vb3qLJRDuMRdjacRwe2T" target="_blank" rel="noopener noreferrer" class="btn-whatsapp" style="display: inline-block; padding: 10px 20px; border-radius: 5px; text-decoration: none;">
             <i class="fab fa-whatsapp"></i> Gabung Sekarang
          </a>
        </div>
      </div>
    </div>
  </div>

  <audio id="successSound" src="/success.mp3" preload="auto"></audio>
  <audio id="errorSound" src="/error.mp3" preload="auto"></audio>

  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const API_BASE_URL = window.location.origin; // Use current origin
      const endpointListSection = document.getElementById('endpointListSection');
      const searchEndpointInput = document.getElementById('searchEndpoint');
      const tagButtonsContainer = document.getElementById('tagButtons');
      const tagsDropdownToggle = document.getElementById('tagsDropdownToggle');
      const tagsDropdownMenu = document.getElementById('tagButtons');

      const tryModal = document.getElementById('tryModal');
      const closeTryModalButton = document.getElementById('closeTryModalButton');
      const parameterInputsDiv = document.getElementById('parameterInputs');
      const runButton = document.getElementById('runButton');
      const loadingIndicator = document.getElementById('loadingIndicator');
      const apiResponseDiv = document.getElementById('apiResponse');
      const executedUrlPre = document.getElementById('executedUrl');
      const responseHeaderPre = document.getElementById('responseHeader');
      const responseBodyPre = document.getElementById('responseBody');
      const axiosExampleDiv = document.getElementById('axiosExample');
      const axiosSnippetPre = document.getElementById('axiosSnippet').querySelector('code');

      const copyEndpointButton = document.getElementById('copyEndpointButton');
      const copyResponseHeader = document.getElementById('copyResponseHeader');
      const copyResponseBody = document.getElementById('copyResponseBody');
      const copyAxiosButton = document.getElementById('copyAxiosButton');

      const successSound = document.getElementById('successSound');
      const errorSound = document.getElementById('errorSound');

      const whatsappModal = document.getElementById('whatsappModal');
      const closeWhatsAppModal = document.getElementById('closeWhatsAppModal');

      let currentEndpointData = null;
      let finalApiUrl = '';
      let isFetchingEndpoints = false;
      let isRequestRunning = false;

      function debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
          const later = () => {
            clearTimeout(timeout);
            func.apply(this, args);
          };
          clearTimeout(timeout);
          timeout = setTimeout(later, wait);
        };
      }

      function displayLoading(section = endpointListSection) {
          section.innerHTML = `
           <div class="loading-indicator" style="grid-column: 1 / -1;">
              <i class="fas fa-cog gear gear1"></i>
              <i class="fas fa-cog gear gear2"></i>
              <span>Memuat...</span>
           </div>`;
      }

      function renderEndpoints(htmlContent) {
          const parser = new DOMParser();
          const doc = parser.parseFromString(htmlContent, 'text/html');
          // Assuming the fetched HTML contains the cards directly or within a specific container
          const newEndpoints = doc.body.innerHTML; // Adjust if content is nested
          if (newEndpoints.trim()) {
               endpointListSection.innerHTML = newEndpoints;
          } else {
               endpointListSection.innerHTML = '<p style="grid-column: 1 / -1; text-align: center;">Tidak ada endpoint ditemukan.</p>';
          }
          attachCardEventListeners(); // Re-attach listeners after rendering
      }

      function fetchAndRenderEndpoints(url) {
        if (isFetchingEndpoints) return;
        isFetchingEndpoints = true;
        displayLoading();

        fetch(url)
          .then(response => {
            if (!response.ok) {
              throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.text();
          })
          .then(html => {
             renderEndpoints(html);
          })
          .catch(error => {
            console.error("Error fetching endpoints:", error);
            endpointListSection.innerHTML = `<p style="grid-column: 1 / -1; text-align: center; color: var(--error-color);">Gagal memuat endpoint. Silakan coba lagi nanti.</p>`;
          })
          .finally(() => {
            isFetchingEndpoints = false;
          });
      }

       function loadTags() {
        fetch('/tags')
          .then(res => {
             if (!res.ok) throw new Error(`HTTP error! status: ${res.status}`);
             return res.json();
          })
          .then(data => {
            let html = '<a class="tag-filter-button" href="#" data-tag="">Semua</a>';
            if (data && data.tags && Array.isArray(data.tags)) {
                 data.tags.forEach(tag => {
                   html += `<a class="tag-filter-button" href="#" data-tag="${encodeURIComponent(tag)}">${tag}</a>`;
                 });
            }
            tagButtonsContainer.innerHTML = html;
            attachTagFilterListeners(); // Attach listeners after tags are loaded
          })
          .catch(error => {
              console.error("Error fetching tags:", error);
              tagButtonsContainer.innerHTML = '<span style="padding: 8px 15px; display: block; color: var(--error-color);">Gagal memuat tags</span>';
          });
      }

      function attachTagFilterListeners() {
          tagButtonsContainer.addEventListener('click', function(e) {
            e.preventDefault();
            const link = e.target.closest('a.tag-filter-button');
            if (link) {
              const tag = link.getAttribute('data-tag');
              searchEndpointInput.value = ''; // Clear search input when using tags
              fetchAndRenderEndpoints(`/renderpage?tags=${tag}`);
              // Close dropdown after selection
              tagsDropdownMenu.classList.remove('show');
            }
          });
      }

      function attachCardEventListeners() {
          endpointListSection.querySelectorAll('.try-button').forEach(button => {
             button.addEventListener('click', handleTryButtonClick);
          });
           endpointListSection.querySelectorAll('.copy-url-button').forEach(button => {
             button.addEventListener('click', handleCopyUrlClick);
          });
      }

      function handleTryButtonClick(event) {
            const button = event.currentTarget;
            const data = button.getAttribute('data-endpoint');
            if (data) {
              try {
                const endpoint = JSON.parse(data);
                openTryModal(endpoint);
              } catch (e) {
                  console.error("Failed to parse endpoint data:", e);
                  alert("Gagal memuat detail endpoint.");
              }
            }
      }

       function handleCopyUrlClick(event) {
            const button = event.currentTarget;
            const url = button.getAttribute('data-url');
            if (url) {
                copyToClipboard(API_BASE_URL + url, 'Endpoint URL');
            }
       }

      function copyToClipboard(text, type) {
        if (!navigator.clipboard) {
          alert('Fitur salin tidak didukung atau tidak diizinkan di browser ini.');
          return;
        }
        navigator.clipboard.writeText(text).then(() => {
          alert(`${type} berhasil disalin!`);
        }).catch(err => {
          console.error(`Gagal menyalin ${type}:`, err);
          alert(`Gagal menyalin ${type}.`);
        });
      }

      function openTryModal(endpoint) {
        if (!endpoint) return;
        currentEndpointData = endpoint;
        parameterInputsDiv.innerHTML = ''; // Clear previous inputs
        apiResponseDiv.style.display = 'none';
        axiosExampleDiv.style.display = 'none';
        executedUrlPre.textContent = '';
        responseHeaderPre.textContent = '';
        responseBodyPre.textContent = '';
        responseBodyPre.innerHTML = ''; // Clear potential media elements
        axiosSnippetPre.textContent = '';
        finalApiUrl = ''; // Reset final URL
        hideCopyButtons();

        // Populate parameters
        if (endpoint.parameter && endpoint.parameter.length > 0) {
          endpoint.parameter.forEach(param => {
            const paramName = param.params;
            const defaultValue = param.example || '';
            const isRequired = param.opsional === false;

            const group = document.createElement('div');
            group.className = 'form-group';

            const label = document.createElement('label');
            label.htmlFor = `param-${paramName}`;
            label.textContent = paramName;
            const reqSpan = document.createElement('span');
             reqSpan.textContent = isRequired ? ' (Wajib)' : ' (Opsional)';
             reqSpan.className = isRequired ? 'required' : 'optional';
             label.appendChild(reqSpan);
             label.innerHTML += ':'; // Add colon after span

            const input = document.createElement('input');
            input.type = 'text';
            input.className = 'param-input'; // Use class for easier selection
            input.id = `param-${paramName}`;
            input.name = paramName;
            input.placeholder = defaultValue ? `Contoh: ${defaultValue}` : `Masukkan ${paramName}`;
            // input.value = defaultValue; // Don't prefill, let user input or use placeholder as guide
            if (isRequired) {
                input.required = true;
            }

            group.appendChild(label);
            group.appendChild(input);
            parameterInputsDiv.appendChild(group);
          });
        } else {
            parameterInputsDiv.innerHTML = '<p>Endpoint ini tidak memerlukan parameter.</p>';
        }

        tryModal.classList.add('show');
        tryModal.setAttribute('aria-hidden', 'false');
        runButton.disabled = false; // Ensure run button is enabled when modal opens
        closeTryModalButton.disabled = false; // Ensure close button is enabled
      }

      function closeModal() {
        if (isRequestRunning) return; // Don't close if request is running
        tryModal.classList.remove('show');
        tryModal.setAttribute('aria-hidden', 'true');
        currentEndpointData = null; // Clear current endpoint data
        // Optionally clear results fields
        // responseHeaderPre.textContent = '';
        // responseBodyPre.textContent = '';
        // responseBodyPre.innerHTML = '';
        // axiosSnippetPre.textContent = '';
        // executedUrlPre.textContent = '';
        // hideCopyButtons();
      }

      function hideCopyButtons() {
          copyEndpointButton.style.display = 'none';
          copyResponseHeader.style.display = 'none';
          copyResponseBody.style.display = 'none';
          copyAxiosButton.style.display = 'none';
      }

       function generateAxiosSnippet(baseUrl, params, contentType) {
            let axiosCode = '';
            const needsArrayBuffer = contentType && !contentType.includes('application/json') && !contentType.includes('text/');
            const config = {};

            if (Object.keys(params).length > 0) {
                 config.params = params;
            }
             if (needsArrayBuffer) {
                 config.responseType = 'arraybuffer';
             }

            const configString = Object.keys(config).length > 0 ? `, ${JSON.stringify(config, null, 2)}` : (needsArrayBuffer ? `, { responseType: 'arraybuffer' }` : '');

             axiosCode = `axios.get('${API_BASE_URL}${baseUrl}'${configString})\n` +
                        `  .then(response => {\n` +
                        `    console.log('Status:', response.status);\n` +
                        `    console.log('Headers:', response.headers);\n` +
                        `    console.log('Data:', response.data);\n` +
                        `  })\n` +
                        `  .catch(error => {\n` +
                        `    console.error('Error fetching data:', error);\n`+
                        `    if (error.response) {\n`+
                        `       console.error('Error Status:', error.response.status);\n`+
                        `       console.error('Error Data:', error.response.data);\n`+
                        `    }\n`+
                        `  });`;

            axiosSnippetPre.textContent = axiosCode;
            axiosExampleDiv.style.display = 'block';
             if (axiosCode) copyAxiosButton.style.display = 'inline-block';
       }

      // --- Event Listeners ---

      // Toggle Tags Dropdown
      tagsDropdownToggle.addEventListener('click', (e) => {
          e.stopPropagation(); // Prevent click from closing immediately
          tagsDropdownMenu.classList.toggle('show');
      });

      // Close dropdown if clicked outside
      document.addEventListener('click', (e) => {
         if (!tagsDropdownToggle.contains(e.target) && !tagsDropdownMenu.contains(e.target)) {
            tagsDropdownMenu.classList.remove('show');
         }
         // Close Try modal if clicked outside the dialog
         if (tryModal.classList.contains('show') && !tryModal.querySelector('.modal-dialog').contains(e.target) && !isRequestRunning) {
             closeModal();
         }
         // Close WhatsApp modal if clicked outside
         if (whatsappModal.classList.contains('show') && !whatsappModal.querySelector('.modal-dialog').contains(e.target)) {
             whatsappModal.classList.remove('show');
             whatsappModal.setAttribute('aria-hidden', 'true');
         }
      });

      // Search Input Listener
      searchEndpointInput.addEventListener('input', debounce(() => {
        const searchTerm = searchEndpointInput.value.trim();
        if (searchTerm) {
          fetchAndRenderEndpoints(`/search?term=${encodeURIComponent(searchTerm)}`);
        } else {
          fetchAndRenderEndpoints('/renderpage?tags='); // Load all if search is cleared
        }
      }, 350));

      // Try Modal Close Button
      closeTryModalButton.addEventListener('click', closeModal);

      // Run Button Listener
      runButton.addEventListener('click', () => {
        if (!currentEndpointData || isRequestRunning) return;

        let apiUrl = currentEndpointData.endpoint;
        const queryParams = {};
        let missingRequired = false;
        let validationError = false;

        // Collect parameters
        parameterInputsDiv.querySelectorAll('.param-input').forEach(input => {
            const paramName = input.name;
            const isRequired = input.required;
            const value = input.value.trim();

            if (isRequired && !value) {
                missingRequired = true;
                input.style.borderColor = 'var(--error-color)'; // Highlight missing required field
            } else {
                 input.style.borderColor = 'var(--border-color)'; // Reset border color
            }

            const placeholder = `{${paramName}}`;
            if (apiUrl.includes(placeholder)) {
                if (value) {
                    apiUrl = apiUrl.replace(placeholder, encodeURIComponent(value));
                } else if (isRequired) {
                     missingRequired = true; // Still missing if required and used in path
                     input.style.borderColor = 'var(--error-color)';
                }
                 // If optional and in path, and no value provided, it might cause issues.
                 // Consider how to handle this - maybe remove the placeholder or error out.
                 // For now, let's assume it's an error if required.
            } else if (value) {
                // Add to query parameters if not part of the path
                queryParams[paramName] = value;
            }
        });

        if (missingRequired) {
          alert('Harap isi semua parameter wajib.');
          return;
        }

        // Construct final URL
        const baseUrl = apiUrl; // API path potentially with path parameters filled
        const urlObj = new URL(API_BASE_URL + baseUrl);
        Object.entries(queryParams).forEach(([key, value]) => {
            urlObj.searchParams.append(key, value);
        });
        finalApiUrl = urlObj.href;

        // Start request
        isRequestRunning = true;
        runButton.disabled = true;
        closeTryModalButton.disabled = true; // Disable close while running
        loadingIndicator.style.display = 'block';
        apiResponseDiv.style.display = 'none';
        axiosExampleDiv.style.display = 'none';
        hideCopyButtons();
        executedUrlPre.textContent = finalApiUrl; // Show URL being called
        if (finalApiUrl) copyEndpointButton.style.display = 'inline-block'; // Show copy button for URL

        axios.get(finalApiUrl, { responseType: 'arraybuffer' }) // Always request arraybuffer first to handle all types
          .then(response => {
            // Determine content type
            const contentType = response.headers['content-type'] || '';
            let responseData = response.data; // ArrayBuffer

            // Process headers
            let headerString = `Status: ${response.status} ${response.statusText}\n`;
            Object.entries(response.headers).forEach(([key, value]) => {
                headerString += `${key}: ${value}\n`;
            });
            responseHeaderPre.textContent = headerString.trim();
            if (headerString.trim()) copyResponseHeader.style.display = 'inline-block';

            // Process body based on content type
            responseBodyPre.textContent = ''; // Clear previous text
            responseBodyPre.innerHTML = ''; // Clear previous media elements

            if (contentType.includes('application/json')) {
                try {
                    const decoder = new TextDecoder('utf-8');
                    const jsonText = decoder.decode(responseData);
                    const jsonData = JSON.parse(jsonText);
                    responseBodyPre.textContent = JSON.stringify(jsonData, null, 2);
                     if (responseBodyPre.textContent) copyResponseBody.style.display = 'inline-block';
                     // Play sound based on internal success flag if exists
                     if (jsonData && jsonData.success === false) {
                         errorSound.play().catch(e => console.warn("Audio play failed:", e));
                     } else {
                         successSound.play().catch(e => console.warn("Audio play failed:", e));
                     }
                } catch (e) {
                    console.error("JSON parsing error:", e);
                    responseBodyPre.textContent = 'Error parsing JSON response.';
                    errorSound.play().catch(e => console.warn("Audio play failed:", e));
                }
            } else if (contentType.startsWith('image/')) {
                const blob = new Blob([responseData], { type: contentType });
                const imageUrl = URL.createObjectURL(blob);
                const img = document.createElement('img');
                img.src = imageUrl;
                img.alt = 'API Response Image';
                img.onload = () => URL.revokeObjectURL(imageUrl); // Clean up blob URL
                responseBodyPre.appendChild(img);
                successSound.play().catch(e => console.warn("Audio play failed:", e));
                 copyResponseBody.style.display = 'none'; // Cannot copy image directly as text
            } else if (contentType.startsWith('video/')) {
                const blob = new Blob([responseData], { type: contentType });
                const videoUrl = URL.createObjectURL(blob);
                const video = document.createElement('video');
                video.src = videoUrl;
                video.controls = true;
                // video.onunload = () => URL.revokeObjectURL(videoUrl); // Revoke on unload might be better
                responseBodyPre.appendChild(video);
                successSound.play().catch(e => console.warn("Audio play failed:", e));
                copyResponseBody.style.display = 'none';
            } else if (contentType.startsWith('audio/')) {
                 const blob = new Blob([responseData], { type: contentType });
                 const audioUrl = URL.createObjectURL(blob);
                 const audio = document.createElement('audio');
                 audio.src = audioUrl;
                 audio.controls = true;
                 responseBodyPre.appendChild(audio);
                 successSound.play().catch(e => console.warn("Audio play failed:", e));
                 copyResponseBody.style.display = 'none';
            } else if (contentType.startsWith('text/')) {
                 const decoder = new TextDecoder('utf-8');
                 responseBodyPre.textContent = decoder.decode(responseData);
                 if (responseBodyPre.textContent) copyResponseBody.style.display = 'inline-block';
                 successSound.play().catch(e => console.warn("Audio play failed:", e));
            } else {
                // Fallback for unknown or binary types (e.g., application/octet-stream)
                responseBodyPre.textContent = `[Binary data of type ${contentType}, ${responseData.byteLength} bytes]`;
                 copyResponseBody.style.display = 'none'; // Cannot copy binary data meaningfully as text
                 successSound.play().catch(e => console.warn("Audio play failed:", e));
            }

            apiResponseDiv.style.display = 'block';
            generateAxiosSnippet(baseUrl, queryParams, contentType);

          })
          .catch(error => {
            errorSound.play().catch(e => console.warn("Audio play failed:", e));
            responseBodyPre.textContent = ''; // Clear previous text
            responseBodyPre.innerHTML = ''; // Clear potential media elements

            if (error.response) {
                 // The request was made and the server responded with a status code
                 // that falls out of the range of 2xx
                 let headerString = `Status: ${error.response.status} ${error.response.statusText || ''}\n`;
                 Object.entries(error.response.headers).forEach(([key, value]) => {
                    headerString += `${key}: ${value}\n`;
                 });
                 responseHeaderPre.textContent = headerString.trim();
                 if (headerString.trim()) copyResponseHeader.style.display = 'inline-block';

                 const errorContentType = error.response.headers['content-type'] || '';
                 const errorData = error.response.data; // This might be ArrayBuffer too

                 if (errorData instanceof ArrayBuffer) {
                     if (errorContentType.includes('application/json')) {
                         try {
                             const decoder = new TextDecoder('utf-8');
                             const errorJsonText = decoder.decode(errorData);
                             const errorJsonData = JSON.parse(errorJsonText);
                             responseBodyPre.textContent = JSON.stringify(errorJsonData, null, 2);
                         } catch (e) {
                             responseBodyPre.textContent = 'Error parsing error JSON response.';
                         }
                     } else if (errorContentType.startsWith('text/')) {
                          const decoder = new TextDecoder('utf-8');
                          responseBodyPre.textContent = decoder.decode(errorData);
                     } else {
                          responseBodyPre.textContent = `[Error response data type: ${errorContentType}, ${errorData.byteLength} bytes]`;
                     }
                 } else if (typeof errorData === 'object') {
                     responseBodyPre.textContent = JSON.stringify(errorData, null, 2);
                 } else {
                     responseBodyPre.textContent = String(errorData);
                 }
                  if (responseBodyPre.textContent) copyResponseBody.style.display = 'inline-block';

            } else if (error.request) {
                // The request was made but no response was received
                responseHeaderPre.textContent = 'Error: No response received from server.';
                responseBodyPre.textContent = 'Could not connect to the server or the request timed out.';
            } else {
                // Something happened in setting up the request that triggered an Error
                responseHeaderPre.textContent = 'Error: Request setup failed.';
                responseBodyPre.textContent = error.message;
            }
            apiResponseDiv.style.display = 'block';
            axiosExampleDiv.style.display = 'none'; // Don't show Axios example on error maybe? Or show it anyway? Let's show it based on the attempted request.
            generateAxiosSnippet(baseUrl, queryParams, null); // Generate snippet even on error

          })
          .finally(() => {
            isRequestRunning = false;
            loadingIndicator.style.display = 'none';
            runButton.disabled = false;
            closeTryModalButton.disabled = false; // Re-enable close button
          });
      });

      // Copy Button Listeners
      copyEndpointButton.addEventListener('click', () => finalApiUrl && copyToClipboard(finalApiUrl, 'Endpoint URL'));
      copyResponseHeader.addEventListener('click', () => responseHeaderPre.textContent && copyToClipboard(responseHeaderPre.textContent, 'Response Header'));
      copyAxiosButton.addEventListener('click', () => axiosSnippetPre.textContent && copyToClipboard(axiosSnippetPre.textContent, 'Axios Code'));
      copyResponseBody.addEventListener('click', () => {
          // Only copy if it's text content, not media elements
          if (responseBodyPre.textContent && !responseBodyPre.querySelector('img, video, audio')) {
             copyToClipboard(responseBodyPre.textContent, 'Response Body');
          } else if (responseBodyPre.querySelector('img, video, audio')) {
              alert('Tidak dapat menyalin konten media sebagai teks.');
          }
      });

      // WhatsApp Modal Logic
      closeWhatsAppModal.addEventListener('click', () => {
           whatsappModal.classList.remove('show');
           whatsappModal.setAttribute('aria-hidden', 'true');
      });
      // Show WhatsApp Modal on first visit (simple check, could use localStorage for persistence)
      if (!sessionStorage.getItem('whatsappModalShown')) {
          setTimeout(() => {
              whatsappModal.classList.add('show');
              whatsappModal.setAttribute('aria-hidden', 'false');
              sessionStorage.setItem('whatsappModalShown', 'true');
          }, 1500); // Show after 1.5 seconds
      }

      // --- Initial Load ---
      loadTags(); // Load tags for the dropdown
      fetchAndRenderEndpoints('/renderpage?tags='); // Fetch all endpoints initially

    });
  </script>

</body>
</html>