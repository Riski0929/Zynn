<!DOCTYPE html>
<html lang="id" class="dark">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>NirKyy - REST API Documentation</title>
    <meta name="description" content="Nirkyy - Kumpulan API gratis dan modern untuk kebutuhan bot WhatsApp, Telegram, dan Web.">
    <meta name="keywords" content="REST API, dokumentasi API, free API, NirKyy, endpoint, API documentation, web API, fetch API, modern API, aesthetic API">
    <meta name="author" content="NirKyy Developer">
    <meta name="robots" content="index, follow">
    <meta http-equiv="Content-Security-Policy" content="upgrade-insecure-requests">
    <meta property="og:title" content="NirKyy - Modern REST API Documentation">
    <meta property="og:description" content="Nirkyy - Kumpulan API gratis dan modern untuk kebutuhan bot WhatsApp, Telegram, dan Web.">
    <meta property="og:type" content="website">
    <meta property="og:url" content="nirkyy.koyeb.app">
    <meta property="og:image" content="/favicon.ico">
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:title" content="NirKyy - Modern REST API Documentation">
    <meta name="twitter:description" content="Nirkyy - Kumpulan API gratis dan modern untuk kebutuhan bot WhatsApp, Telegram, dan Web.">
    <meta name="twitter:site" content="@NirKyyDev">
    <meta name="twitter:image" content="/favicon.ico">
    <link rel="icon" href="/favicon.ico" type="image/x-icon">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" integrity="sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIftl+Vegovlnee1c9QX4TctnWMn13TZye+giMm8e2LwA==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <script src="https://cdn.tailwindcss.com?plugins=forms"></script>
    <style>
      body { font-family: 'Poppins', sans-serif; }
      .dark ::-webkit-scrollbar { width: 8px; height: 8px; }
      .dark ::-webkit-scrollbar-track { background: #1e293b; border-radius: 4px; }
      .dark ::-webkit-scrollbar-thumb { background: #475569; border-radius: 4px; }
      .dark ::-webkit-scrollbar-thumb:hover { background: #64748b; }
      .dark ::selection { background-color: #60a5fa; color: #111827; }
      #responseBodyContainer audio { min-height: 54px; }
      .btn-copy-feedback { background-color: #16a34a !important; color: white !important; }
      .modal { transition: opacity 0.3s ease, visibility 0.3s ease; }
      .modal.hidden { opacity: 0; visibility: hidden; }
      .modal-content-transform { transition: transform 0.3s ease; }
      .modal.hidden .modal-content-transform { transform: scale(0.95); }
      .modal.opacity-100 .modal-content-transform { transform: scale(1); }
    </style>
    <script>
        tailwind.config = {
            darkMode: 'class',
            theme: {
                extend: {
                    colors: {
                        primary: {
                            light: '#8a83ff',
                            DEFAULT: '#6c63ff',
                            dark: '#5a52cc'
                        },
                        'slate': {
                          50: '#f8fafc', 100: '#f1f5f9', 200: '#e2e8f0', 300: '#cbd5e1', 400: '#94a3b8',
                          500: '#64748b', 600: '#475569', 700: '#334155', 800: '#1e293b', 900: '#0f172a', 950: '#020617'
                        },
                        'api-accent': '#60a5fa',
                        'api-accent-hover': '#3b82f6',
                        'api-bg': '#0f172a',
                        'api-card': '#1e293b',
                        'api-border': '#334155',
                        'api-text': '#e2e8f0',
                        'api-text-secondary': '#94a3b8',
                        'api-input': '#334155',
                        'api-input-focus': '#475569',
                        'api-pre': '#020617',
                    },
                }
            }
        }
    </script>
</head>
<body class="bg-api-bg text-api-text antialiased">

  <header class="bg-api-card border-b border-api-border sticky top-0 z-50 px-4 py-3 md:px-6">
    <div class="max-w-7xl mx-auto flex flex-wrap items-center justify-between gap-y-3">
      <div class="flex items-center gap-3">
        <img src="/favicon.ico" alt="Logo NirKyy" class="h-10 w-10 rounded-full">
        <h1 class="text-xl md:text-2xl font-semibold text-white">NirKyy API</h1>
      </div>
      <div class="relative w-full sm:w-auto" id="tagDropdownContainer">
        <button id="dropdownTagsButton" class="w-full sm:w-auto flex items-center justify-center gap-2 px-4 py-2 bg-slate-700 hover:bg-slate-600 rounded-md text-sm font-medium text-api-text-secondary focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-api-card focus:ring-api-accent transition">
          <i class="fas fa-tags"></i>
          <span id="dropdownTagsLabel">Filter by Tag</span>
          <i class="fas fa-chevron-down text-xs ml-1"></i>
        </button>
        <div id="tagButtons" class="absolute right-0 mt-2 w-56 bg-api-card rounded-md shadow-lg ring-1 ring-black ring-opacity-5 z-10 hidden origin-top-right py-1">
           <a class="block px-4 py-2 text-sm text-api-text-secondary hover:bg-api-accent hover:text-white" href="#" data-tags="">All Tags</a>
           <div class="border-t border-api-border my-1"></div>
           <div id="tagListItems" class="max-h-60 overflow-y-auto">
               <span class="block px-4 py-2 text-sm text-api-text-secondary italic">Loading tags...</span>
           </div>
        </div>
      </div>
    </div>
  </header>

  <main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <div class="relative mb-8">
      <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
        <i class="fas fa-search text-api-text-secondary"></i>
      </div>
      <input type="text" id="searchEndpoint" class="w-full p-3 pl-10 rounded-lg bg-api-input border border-api-border focus:ring-2 focus:ring-api-accent focus:border-transparent placeholder-api-text-secondary text-api-text" placeholder="Cari berdasarkan nama, path, atau tag...">
    </div>
    <div id="endpointListSection" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
         <div class="md:col-span-2 lg:col-span-3 text-center py-10">
             <div role="status" class="inline-block">
                 <svg aria-hidden="true" class="inline w-8 h-8 text-api-text-secondary animate-spin dark:text-gray-600 fill-api-accent" viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg">
                     <path d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z" fill="currentColor"/>
                     <path d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5424 39.6781 93.9676 39.0409Z" fill="currentFill"/>
                 </svg>
                 <span class="sr-only">Loading...</span>
             </div>
             <p class="mt-2 text-sm text-api-text-secondary italic">Memuat daftar endpoint...</p>
         </div>
    </div>
  </main>

  <footer class="text-center py-6 mt-12 bg-api-card border-t border-api-border text-sm text-api-text-secondary">
    <p>Â© 2025 NirKyy. Tetap semangat, API tetap aktif selama Koyeb gratis! ðŸš€</p>
    <p>Bergabunglah di <a href="https://whatsapp.com/channel/0029Vb3qLJRDuMRdjacRwe2T" target="_blank" rel="noopener noreferrer" class="text-api-accent hover:text-api-accent-hover font-medium"><i class="fab fa-whatsapp"></i> Saluran WhatsApp</a> untuk update terbaru.</p>
  </footer>

  <div id="modalOverlay" class="fixed inset-0 bg-black/70 z-[99] hidden modal"></div>

  <div id="tryModal" class="fixed inset-0 z-[100] flex items-center justify-center p-4 hidden modal">
    <div class="bg-api-card rounded-lg shadow-xl w-full max-w-3xl max-h-[90vh] flex flex-col modal-content-transform">
      <div class="flex justify-between items-center p-4 border-b border-api-border">
        <h5 class="text-lg font-semibold text-api-accent flex items-center gap-2" id="tryModalLabel"><i class="fas fa-vial"></i>Coba Endpoint</h5>
        <button type="button" class="text-api-text-secondary hover:text-white closeModalBtn" aria-label="Close">
          <i class="fas fa-times"></i>
        </button>
      </div>
      <div class="p-4 overflow-y-auto flex-grow">
        <div id="parameterInputs" class="mb-4">
        </div>
        <button id="runButton" class="w-full bg-api-accent hover:bg-api-accent-hover text-white font-semibold py-2.5 px-4 rounded-lg flex items-center justify-center space-x-2 mb-3 transition disabled:opacity-50 disabled:cursor-not-allowed">
          <i class="fas fa-play"></i>
          <span>Jalankan Permintaan</span>
        </button>
        <div id="loadingIndicator" class="flex items-center justify-center text-api-accent my-4 hidden">
            <svg aria-hidden="true" class="inline w-5 h-5 mr-2 text-api-text-secondary animate-spin dark:text-gray-600 fill-api-accent" viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z" fill="currentColor"/><path d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5424 39.6781 93.9676 39.0409Z" fill="currentFill"/></svg>
            <span>Memproses...</span>
        </div>

        <div id="resultUrl" class="mt-3 hidden">
            <h5 class="text-sm font-semibold text-api-accent-hover mb-1">URL Permintaan:</h5>
            <div class="relative response-area">
                 <button class="btn-copy absolute top-2 right-2 bg-slate-700 hover:bg-slate-600 text-gray-400 hover:text-white p-1 rounded text-xs z-10" data-clipboard-target="#finalUrlText" title="Salin URL">
                     <i class="far fa-copy"></i>
                 </button>
                 <pre class="bg-api-pre p-3 rounded text-xs text-gray-300 font-mono max-h-40 overflow-auto"><code id="finalUrlText"></code></pre>
            </div>
        </div>

        <div id="apiResponse" class="mt-3 hidden">
          <div class="response-area">
              <h5 class="text-sm font-semibold text-api-accent-hover mb-1 mt-4">Response Header:</h5>
              <button class="btn-copy absolute top-8 right-2 bg-slate-700 hover:bg-slate-600 text-gray-400 hover:text-white p-1 rounded text-xs z-10" data-clipboard-target="#responseHeader" title="Salin Header">
                  <i class="far fa-copy"></i>
              </button>
              <pre id="responseHeader" class="bg-api-pre p-3 rounded text-xs text-gray-300 font-mono max-h-40 overflow-auto"></pre>
          </div>
          <div class="response-area mt-3">
              <h5 class="text-sm font-semibold text-api-accent-hover mb-1 mt-4">Response Body:</h5>
              <button class="btn-copy btn-copy-body absolute top-8 right-2 bg-slate-700 hover:bg-slate-600 text-gray-400 hover:text-white p-1 rounded text-xs z-10 hidden" data-clipboard-target="#responseBodyContainer pre, #responseBodyContainer code" title="Salin Body">
                   <i class="far fa-copy"></i>
               </button>
              <div id="responseBodyContainer" class="p-0 mt-2 bg-api-pre rounded border border-api-border overflow-hidden"></div>
          </div>
        </div>

        <div id="axiosExample" class="mt-4 hidden">
            <h5 class="text-sm font-semibold text-api-accent-hover mb-1 mt-4">Contoh Kode Axios (GET):</h5>
            <div class="relative response-area">
                 <button class="btn-copy absolute top-8 right-2 bg-slate-700 hover:bg-slate-600 text-gray-400 hover:text-white p-1 rounded text-xs z-10" data-clipboard-target="#axiosSnippet code" title="Salin Kode">
                     <i class="far fa-copy"></i>
                 </button>
                <pre id="axiosSnippet" class="bg-api-pre p-3 rounded text-xs text-gray-300 font-mono max-h-60 overflow-auto"><code></code></pre>
            </div>
        </div>
      </div>
      <div class="flex justify-end p-4 bg-slate-900/50 border-t border-api-border space-x-2">
        <button type="button" class="closeModalBtn px-4 py-2 bg-slate-600 hover:bg-slate-500 text-white rounded-md text-sm font-medium transition">Tutup</button>
      </div>
    </div>
  </div>

  <div id="whatsappModal" class="fixed inset-0 z-[100] flex items-center justify-center p-4 hidden modal">
     <div class="bg-api-card rounded-lg shadow-xl w-full max-w-md max-h-[90vh] flex flex-col modal-content-transform">
      <div class="flex justify-between items-center p-4 border-b border-api-border">
        <h5 class="text-lg font-semibold text-green-500 flex items-center gap-2" id="whatsappModalLabel"><i class="fab fa-whatsapp"></i> Gabung Saluran WhatsApp Kami!</h5>
        <button type="button" class="text-api-text-secondary hover:text-white closeModalBtn" aria-label="Close">
            <i class="fas fa-times"></i>
        </button>
      </div>
      <div class="p-4 overflow-y-auto flex-grow">
        <p class="text-base text-api-text-secondary">Dapatkan update API terbaru, info menarik, dan diskusi seru seputar NirKyy langsung di WhatsApp Anda.</p>
      </div>
      <div class="flex flex-col sm:flex-row justify-center gap-2 p-4 bg-slate-900/50 border-t border-api-border">
        <a href="https://whatsapp.com/channel/0029Vb3qLJRDuMRdjacRwe2T" target="_blank" rel="noopener noreferrer" class="inline-flex items-center justify-center gap-2 px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-md text-sm font-medium transition w-full sm:w-auto">
            <i class="fab fa-whatsapp"></i> Gabung Sekarang
        </a>
        <button type="button" class="closeModalBtn px-4 py-2 bg-slate-600 hover:bg-slate-500 text-white rounded-md text-sm font-medium transition w-full sm:w-auto">Nanti Saja</button>
      </div>
    </div>
  </div>

  <audio id="successSound" src="/success.mp3" preload="auto"></audio>
  <audio id="errorSound" src="/error.mp3" preload="auto"></audio>

  <script src="https://code.jquery.com/jquery-3.7.1.min.js" integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/clipboard.js/2.0.11/clipboard.min.js"></script>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
        let finalApiUrl = '';
        let isFetching = false;
        const endpointListSection = document.getElementById('endpointListSection');
        const searchEndpointInput = document.getElementById('searchEndpoint');
        const tagDropdownContainer = document.getElementById('tagDropdownContainer');
        const tagButtons = document.getElementById('tagButtons');
        const tagListItems = document.getElementById('tagListItems');
        const dropdownTagsButton = document.getElementById('dropdownTagsButton');
        const dropdownTagsLabel = document.getElementById('dropdownTagsLabel');
        const tryModalElement = document.getElementById('tryModal');
        const whatsappModalElement = document.getElementById('whatsappModal');
        const modalOverlay = document.getElementById('modalOverlay');
        const parameterInputsDiv = document.getElementById('parameterInputs');
        const runButton = document.getElementById('runButton');
        const responseHeaderPre = document.getElementById('responseHeader');
        const responseBodyContainer = document.getElementById('responseBodyContainer');
        const axiosSnippetPre = document.getElementById('axiosSnippet').querySelector('code');
        const loadingIndicator = document.getElementById('loadingIndicator');
        const successSound = document.getElementById('successSound');
        const errorSound = document.getElementById('errorSound');
        const apiResponseDiv = document.getElementById('apiResponse');
        const axiosExampleDiv = document.getElementById('axiosExample');
        const resultUrlDiv = document.getElementById('resultUrl');
        const finalUrlTextCode = document.getElementById('finalUrlText');
        const copyResponseBodyBtn = document.querySelector('.btn-copy-body');
        const allCloseModalButtons = document.querySelectorAll('.closeModalBtn');

        let currentEndpointData = null;
        let clipboard;
        let activeModal = null;

        clipboard = new ClipboardJS('.btn-copy');
        clipboard.on('success', function(e) {
            const originalIcon = e.trigger.innerHTML;
            const originalTitle = e.trigger.getAttribute('title');
            e.trigger.innerHTML = '<i class="fas fa-check"></i>';
            e.trigger.setAttribute('title', 'Disalin!');
            e.trigger.classList.add('btn-copy-feedback');
            setTimeout(() => {
                e.trigger.innerHTML = originalIcon;
                 e.trigger.setAttribute('title', originalTitle);
                e.trigger.classList.remove('btn-copy-feedback');
            }, 1500);
            e.clearSelection();
        });
        clipboard.on('error', function(e) {
            const originalTitle = e.trigger.getAttribute('title');
            e.trigger.setAttribute('title', 'Gagal menyalin');
            setTimeout(() => {
                 e.trigger.setAttribute('title', originalTitle);
            }, 1500);
        });

        function openModal(modalElement) {
            if (!modalElement) return;
            activeModal = modalElement;
            modalOverlay.classList.remove('hidden');
            modalElement.classList.remove('hidden');
            setTimeout(() => {
                modalOverlay.classList.add('opacity-100');
                modalElement.classList.add('opacity-100');
            }, 10);
            document.body.style.overflow = 'hidden';
        }

        function closeModal() {
            if (!activeModal) return;
            modalOverlay.classList.remove('opacity-100');
            activeModal.classList.remove('opacity-100');
            setTimeout(() => {
                modalOverlay.classList.add('hidden');
                activeModal.classList.add('hidden');
                if (activeModal === tryModalElement && loadingIndicator.style.display !== 'block') {
                    resetModalOutput();
                    currentEndpointData = null;
                    runButton.disabled = false;
                }
                activeModal = null;
                 document.body.style.overflow = '';
            }, 300);
        }

        allCloseModalButtons.forEach(btn => btn.addEventListener('click', closeModal));
        modalOverlay.addEventListener('click', closeModal);
        document.addEventListener('keydown', (e) => {
          if (e.key === "Escape" && activeModal) {
            closeModal();
          }
        });

        setTimeout(() => {
             openModal(whatsappModalElement);
        }, 2000);

        dropdownTagsButton.addEventListener('click', (e) => {
            e.stopPropagation();
            tagButtons.classList.toggle('hidden');
        });

        document.addEventListener('click', (e) => {
            if (!tagDropdownContainer.contains(e.target)) {
                 tagButtons.classList.add('hidden');
            }
        });

        function debounce(func, wait) {
            let timeout;
            return function(...args) {
                clearTimeout(timeout);
                timeout = setTimeout(() => func.apply(this, args), wait);
            };
        }

        function attachCardEvents() {
             endpointListSection.addEventListener('click', function(e) {
                 const tryButton = e.target.closest('.try-button');
                 if (tryButton) {
                     const data = tryButton.getAttribute('data-endpoint');
                     if (data) {
                         try {
                            const endpoint = JSON.parse(data);
                            openTryModal(endpoint);
                         } catch(parseError) {
                             console.error("Failed to parse endpoint data:", parseError);
                             alert("Error: Data endpoint tidak valid.");
                         }
                     }
                 }
             });
         }

        function openTryModal(endpoint) {
            currentEndpointData = endpoint;
            parameterInputsDiv.innerHTML = '';
            resetModalOutput();
            document.getElementById('tryModalLabel').innerHTML = `<i class="fas fa-vial"></i>Coba: ${endpoint.nama}`;

            if (endpoint.parameter && endpoint.parameter.length > 0) {
                parameterInputsDiv.innerHTML += `<h6 class="text-sm font-semibold text-api-text-secondary mb-3">Parameter Permintaan</h6>`;
                endpoint.parameter.forEach(param => {
                    const paramName = param.params;
                    const defaultValue = param.example || '';
                    const isRequired = (param.opsional === false);
                    const inputId = `param-${paramName}`;

                    const div = document.createElement('div');
                    div.className = 'mb-3';

                    const label = document.createElement('label');
                    label.htmlFor = inputId;
                    label.className = 'block text-sm font-medium text-gray-300 mb-1';
                    label.innerHTML = `${paramName} ${isRequired ? '<span class="text-red-500">*</span>' : ''}`;

                    const input = document.createElement('input');
                    input.type = 'text';
                    input.className = 'w-full p-2 rounded bg-api-input border border-api-border focus:ring-1 focus:ring-api-accent focus:border-transparent text-api-text placeholder-api-text-secondary';
                    input.id = inputId;
                    input.name = paramName;
                    input.placeholder = param.deskripsi || (defaultValue ? `Contoh: ${defaultValue}` : `Masukkan ${paramName}`);
                    input.value = defaultValue;
                    if (isRequired) input.required = true;

                    div.appendChild(label);
                    div.appendChild(input);
                    parameterInputsDiv.appendChild(div);
                });
            } else {
                 parameterInputsDiv.innerHTML = `<p class="text-api-text-secondary italic text-sm">Endpoint ini tidak memerlukan parameter tambahan.</p>`;
            }
            openModal(tryModalElement);
        }

        function resetModalOutput() {
            responseHeaderPre.textContent = '';
            responseBodyContainer.innerHTML = '';
            axiosSnippetPre.textContent = '';
            finalUrlTextCode.textContent = '';
            apiResponseDiv.classList.add('hidden');
            axiosExampleDiv.classList.add('hidden');
            resultUrlDiv.classList.add('hidden');
            if(copyResponseBodyBtn) copyResponseBodyBtn.classList.add('hidden');
            finalApiUrl = '';
            const mediaElements = responseBodyContainer.querySelectorAll('img[src^="blob:"], video[src^="blob:"], audio[src^="blob:"]');
            mediaElements.forEach(el => {
                if (el.src) {
                    try { URL.revokeObjectURL(el.src); } catch(e) { console.warn("Could not revoke", el.src, e); }
                }
            });
            const downloadLinks = responseBodyContainer.querySelectorAll('a[href^="blob:"]');
            downloadLinks.forEach(a => {
                 if (a.href) {
                    try { URL.revokeObjectURL(a.href); } catch(e) { console.warn("Could not revoke", a.href, e); }
                 }
            });
            parameterInputsDiv.querySelectorAll('input.border-red-500').forEach(el => el.classList.remove('border-red-500'));

        }

        runButton.addEventListener('click', function() {
            if (loadingIndicator.classList.contains('flex') || !currentEndpointData) return;

            runButton.disabled = true;
            loadingIndicator.classList.remove('hidden');
            loadingIndicator.classList.add('flex');
            resetModalOutput();

            let apiUrl = currentEndpointData.endpoint;
            const queryParams = {};
            let missingRequired = false;
            let firstMissingField = null;

            parameterInputsDiv.querySelectorAll('input.border-red-500').forEach(el => el.classList.remove('border-red-500', 'border-2'));
            const inputs = parameterInputsDiv.querySelectorAll('input[name]');
            inputs.forEach(input => {
                const paramName = input.name;
                const paramDefinition = currentEndpointData.parameter.find(p => p.params === paramName);
                const isRequired = paramDefinition && (paramDefinition.opsional === false);
                const inputValue = input.value.trim();

                if (isRequired && !inputValue) {
                    missingRequired = true;
                    if (!firstMissingField) firstMissingField = input;
                    input.classList.add('border-red-500', 'border-2');
                } else {
                     input.classList.remove('border-red-500', 'border-2');
                }

                 if (inputValue) {
                    const placeholder = `{${paramName}}`;
                     if (apiUrl.includes(placeholder)) {
                        apiUrl = apiUrl.replace(placeholder, encodeURIComponent(inputValue));
                    } else {
                         queryParams[paramName] = inputValue;
                    }
                 }
            });

            if (missingRequired) {
                alert('Harap isi semua parameter yang ditandai wajib (*).');
                if (firstMissingField) firstMissingField.focus();
                runButton.disabled = false;
                loadingIndicator.classList.add('hidden');
                loadingIndicator.classList.remove('flex');
                return;
            }

            const baseUrl = `https://nirkyy.koyeb.app${apiUrl}`;
            const urlObj = new URL(baseUrl);
            Object.entries(queryParams).forEach(([key, value]) => {
                urlObj.searchParams.append(key, value);
            });
            finalApiUrl = urlObj.href;

            finalUrlTextCode.textContent = finalApiUrl;
            resultUrlDiv.classList.remove('hidden');

            const axiosConfig = {
                method: 'get',
                url: finalApiUrl,
                responseType: 'arraybuffer',
                validateStatus: function (status) {
                     return status >= 200 && status < 500;
                }
            };

            axios(axiosConfig)
            .then(response => {
                const headers = response.headers;
                const contentType = headers['content-type'] || '';
                const status = response.status;

                let headerString = `Status: ${status} ${response.statusText}\n`;
                Object.entries(headers).forEach(([key, value]) => {
                    headerString += `${key}: ${value}\n`;
                });
                responseHeaderPre.textContent = headerString.trim();
                apiResponseDiv.classList.remove('hidden');

                responseBodyContainer.innerHTML = '';
                if(copyResponseBodyBtn) copyResponseBodyBtn.classList.add('hidden');
                responseBodyContainer.classList.remove('p-3'); // remove padding if not json/text
                responseBodyContainer.classList.add('border','border-api-border','bg-api-pre'); // ensure bg/border

                const decoder = new TextDecoder('utf-8');
                let responseText = '';
                let isJson = false;
                try {
                    responseText = decoder.decode(new Uint8Array(response.data));
                    if (contentType.includes('application/json')) {
                        JSON.parse(responseText);
                        isJson = true;
                    }
                } catch (e) {
                   isJson = false;
                }

                if (isJson) {
                     const pre = document.createElement('pre');
                     pre.className = 'p-3 text-xs text-gray-300 font-mono max-h-60 overflow-auto';
                     pre.textContent = JSON.stringify(JSON.parse(responseText), null, 2);
                     responseBodyContainer.appendChild(pre);
                     responseBodyContainer.classList.add('p-0'); // Use pre's padding
                     if(copyResponseBodyBtn) copyResponseBodyBtn.classList.remove('hidden');
                } else if (contentType.startsWith('image/')) {
                     const blob = new Blob([response.data], { type: contentType });
                     const imageUrl = URL.createObjectURL(blob);
                     const img = document.createElement('img');
                     img.src = imageUrl;
                     img.alt = "API Response Image";
                     img.className = "max-w-full h-auto block rounded";
                     responseBodyContainer.appendChild(img);
                     responseBodyContainer.classList.remove('bg-api-pre', 'border', 'border-api-border'); // Remove bg for image
                } else if (contentType.startsWith('video/')) {
                    const blob = new Blob([response.data], { type: contentType });
                    const videoUrl = URL.createObjectURL(blob);
                    const video = document.createElement('video');
                    video.controls = true;
                    video.className = "max-w-full h-auto block rounded";
                    responseBodyContainer.appendChild(video);
                    video.src = videoUrl;
                    responseBodyContainer.classList.remove('bg-api-pre', 'border', 'border-api-border'); // Remove bg for video
                } else if (contentType.startsWith('audio/')) {
                    if(response.data.byteLength > 0) {
                        const blob = new Blob([response.data], { type: contentType });
                        const audioUrl = URL.createObjectURL(blob);
                        const audio = document.createElement('audio');
                        audio.controls = true;
                        audio.preload = 'auto';
                        audio.className = "w-full block rounded";
                        responseBodyContainer.appendChild(audio);
                        audio.src = audioUrl;
                        responseBodyContainer.classList.add('p-3'); // Add padding around audio
                    } else {
                         const p = document.createElement('p');
                         p.textContent = "[Data audio kosong]";
                         p.className = "text-yellow-500 italic p-3 text-sm";
                         responseBodyContainer.appendChild(p);
                    }
                 } else if (contentType.startsWith('text/')) {
                     const pre = document.createElement('pre');
                     pre.className = 'p-3 text-xs text-gray-300 font-mono max-h-60 overflow-auto whitespace-pre-wrap break-words';
                     pre.textContent = responseText;
                     responseBodyContainer.appendChild(pre);
                     responseBodyContainer.classList.add('p-0'); // Use pre's padding
                     if(copyResponseBodyBtn) copyResponseBodyBtn.classList.remove('hidden');
                 } else {
                    const pre = document.createElement('pre');
                    pre.className = 'p-3 text-xs text-gray-400 italic font-mono max-h-20 overflow-auto';
                    pre.textContent = `[${contentType} - ${response.data.byteLength} bytes received]`;
                    responseBodyContainer.appendChild(pre);
                    responseBodyContainer.classList.add('p-0'); // Use pre's padding
                    try {
                        const blob = new Blob([response.data], { type: contentType });
                        const downloadUrl = URL.createObjectURL(blob);
                        const a = document.createElement('a');
                        a.href = downloadUrl;
                        const disposition = headers['content-disposition'];
                        let filename = 'download';
                         if (disposition && disposition.indexOf('attachment') !== -1) {
                            const filenameRegex = /filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/;
                            const matches = filenameRegex.exec(disposition);
                            if (matches != null && matches[1]) {
                                filename = matches[1].replace(/['"]/g, '');
                             }
                         } else {
                            const pathParts = new URL(finalApiUrl).pathname.split('/');
                             filename = pathParts[pathParts.length - 1] || 'download';
                             if (!filename.includes('.') && filename !== 'download') {
                                 const extMatch = contentType.split('/')[1];
                                 if(extMatch) filename += `.${extMatch.split('+')[0]}`;
                                 else filename += '.bin';
                             } else if (filename === 'download'){
                                const extMatch = contentType.split('/')[1];
                                if(extMatch) filename += `.${extMatch.split('+')[0]}`;
                                else filename += '.bin';
                             }
                         }
                         a.download = filename;
                         a.textContent = `Unduh File (${filename})`;
                         a.className = 'inline-block mt-2 ml-3 mb-3 text-api-accent hover:text-api-accent-hover text-sm underline';
                         responseBodyContainer.appendChild(a);
                    } catch (blobError) {
                         console.error("Error creating download link:", blobError);
                         const errorP = document.createElement('p');
                         errorP.textContent = "(Tidak dapat membuat tautan unduhan)";
                         errorP.className = 'text-red-500 italic mt-1 ml-3 mb-3 text-sm';
                         responseBodyContainer.appendChild(errorP);
                    }
                 }

                 if (status >= 200 && status < 300) {
                    let playSuccess = true;
                     if (isJson) {
                         try {
                             const jsonData = JSON.parse(responseText);
                             if (jsonData && jsonData.success === false) {
                                 playSuccess = false;
                             }
                         } catch (e) { }
                     }
                     if(playSuccess && successSound.readyState >= 2) successSound.play().catch(e=>console.warn("Sound play error",e));
                     else if (!playSuccess && errorSound.readyState >= 2) errorSound.play().catch(e=>console.warn("Sound play error",e));
                 } else {
                     if(errorSound.readyState >= 2) errorSound.play().catch(e=>console.warn("Sound play error",e));
                 }


                const axiosResponseType = (!isJson && (contentType.startsWith('image/') || contentType.startsWith('video/') || contentType.startsWith('audio/') || !contentType.startsWith('text/'))) ? ",\n  responseType: 'arraybuffer'" : "";
                let axiosCode = `axios.get('${baseUrl}', {\n`;
                if (Object.keys(queryParams).length > 0) {
                     axiosCode += `  params: ${JSON.stringify(queryParams, null, 2)}`;
                     if(axiosResponseType) axiosCode += axiosResponseType;
                     axiosCode += `\n`;
                } else if (axiosResponseType) {
                     axiosCode += `  responseType: 'arraybuffer'\n`;
                }
                 axiosCode += `})\n.then(response => {\n  console.log('Status:', response.status);\n  console.log('Headers:', response.headers);\n  console.log('Data:', response.data);\n})\n.catch(error => {\n  console.error('Error fetching data:', error);\n});`;

                axiosSnippetPre.textContent = axiosCode;
                axiosExampleDiv.classList.remove('hidden');

            })
            .catch(error => {
                if(errorSound.readyState >= 2) errorSound.play().catch(e=>console.warn("Sound play error",e));
                console.error('Axios request failed:', error);
                apiResponseDiv.classList.remove('hidden');
                 responseHeaderPre.textContent = `Error: ${error.message}`;
                 responseBodyContainer.innerHTML = '';
                 if(copyResponseBodyBtn) copyResponseBodyBtn.classList.add('hidden');
                 responseBodyContainer.classList.add('border','border-api-border','bg-api-pre'); // ensure bg/border

                 if (error.response) {
                    let headerString = `Status: ${error.response.status} ${error.response.statusText}\n`;
                    Object.entries(error.response.headers).forEach(([key, value]) => { headerString += `${key}: ${value}\n`; });
                    responseHeaderPre.textContent = headerString.trim();

                    if (error.response.data) {
                        const pre = document.createElement('pre');
                        pre.className = 'p-3 text-xs text-red-400 font-mono max-h-60 overflow-auto whitespace-pre-wrap break-words';
                        try {
                             const decoder = new TextDecoder('utf-8');
                             const errorText = decoder.decode(new Uint8Array(error.response.data));
                             try {
                                 pre.textContent = JSON.stringify(JSON.parse(errorText), null, 2);
                             } catch (jsonError) {
                                 pre.textContent = errorText;
                             }
                         } catch (decodeError) {
                              pre.textContent = `[Binary error data received - ${error.response.data.byteLength} bytes]`;
                          }
                           responseBodyContainer.appendChild(pre);
                           responseBodyContainer.classList.add('p-0');
                           if(copyResponseBodyBtn) copyResponseBodyBtn.classList.remove('hidden');
                    } else {
                         const p = document.createElement('p');
                         p.textContent = '(No response body)';
                         p.className = 'italic text-api-text-secondary p-3 text-sm';
                         responseBodyContainer.appendChild(p);
                     }

                 } else if (error.request) {
                     const p = document.createElement('p');
                     p.textContent = 'Tidak ada respons diterima dari server. Periksa koneksi atau URL.';
                     p.className = 'text-red-500 p-3 text-sm';
                     responseBodyContainer.appendChild(p);
                } else {
                     const p = document.createElement('p');
                     p.textContent = `Error konfigurasi permintaan: ${error.message}`;
                     p.className = 'text-red-500 p-3 text-sm';
                     responseBodyContainer.appendChild(p);
                }
            })
            .finally(() => {
                loadingIndicator.classList.add('hidden');
                loadingIndicator.classList.remove('flex');
                runButton.disabled = false;
            });
        });


        function fetchData(url) {
             if (isFetching) return;
             isFetching = true;
             endpointListSection.innerHTML = `
                 <div class="md:col-span-2 lg:col-span-3 text-center py-10">
                    <div role="status" class="inline-block">
                        <svg aria-hidden="true" class="inline w-8 h-8 text-api-text-secondary animate-spin dark:text-gray-600 fill-api-accent" viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z" fill="currentColor"/>
                            <path d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5424 39.6781 93.9676 39.0409Z" fill="currentFill"/>
                        </svg>
                        <span class="sr-only">Loading...</span>
                    </div>
                    <p class="mt-2 text-sm text-api-text-secondary italic">Memuat...</p>
                 </div>`;

             fetch(url)
                .then(response => {
                     if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                     return response.text();
                 })
                .then(html => {
                    const tempDiv = document.createElement('div');
                    tempDiv.innerHTML = html;
                    const newCards = tempDiv.innerHTML; // Get only the inner content

                    if (newCards.trim() === '' || newCards.includes("Tidak ada endpoint")) {
                         endpointListSection.innerHTML = `<p class="md:col-span-2 lg:col-span-3 text-center text-api-text-secondary italic mt-4">Tidak ada endpoint yang cocok ditemukan.</p>`;
                    } else {
                         endpointListSection.innerHTML = newCards;
                    }
                 })
                .catch(error => {
                     console.error('Fetch error:', error);
                     endpointListSection.innerHTML = `<p class="md:col-span-2 lg:col-span-3 text-center text-red-500 mt-4">Gagal memuat endpoint. Coba lagi nanti.</p>`;
                 })
                .finally(() => {
                     isFetching = false;
                 });
         }

         const debouncedSearch = debounce(function() {
             const searchTerm = searchEndpointInput.value.trim();
             const url = searchTerm
                ? `/search?term=${encodeURIComponent(searchTerm)}`
                : '/renderpage?tags=';
             fetchData(url);
             dropdownTagsLabel.textContent = 'Filter by Tag'; // Reset dropdown label on search
             tagButtons.classList.add('hidden'); // Close dropdown on search
         }, 350);

         searchEndpointInput.addEventListener('input', debouncedSearch);

         tagButtons.addEventListener('click', function(e) {
             e.preventDefault();
             const tagLink = e.target.closest('a');
             if (tagLink && tagLink.hasAttribute('data-tags')) {
                 const tags = tagLink.getAttribute('data-tags');
                 searchEndpointInput.value = '';
                 fetchData(`/renderpage?tags=${encodeURIComponent(tags)}`);
                 dropdownTagsLabel.textContent = tags === '' ? 'All Tags' : tagLink.textContent;
                 tagButtons.classList.add('hidden');
             }
         });

        function loadTags() {
            fetch('/tags')
                .then(res => {
                    if (!res.ok) throw new Error('Failed to load tags');
                    return res.json();
                })
                .then(data => {
                    let html = '';
                    if (data.tags && data.tags.length > 0) {
                        data.tags.sort().forEach(tag => {
                            html += `<a class="block px-4 py-2 text-sm text-api-text-secondary hover:bg-api-accent hover:text-white capitalize" href="#" data-tags="${tag}">${tag}</a>`;
                        });
                    } else {
                         html += '<span class="block px-4 py-2 text-sm text-api-text-secondary italic">Tidak ada tag tersedia.</span>';
                    }
                    tagListItems.innerHTML = html;
                })
                .catch(error => {
                    console.error("Error loading tags:", error);
                    tagListItems.innerHTML = '<span class="block px-4 py-2 text-sm text-red-500 italic">Gagal memuat tag.</span>';
                });
        }

        fetchData('/renderpage?tags=');
        loadTags();
        attachCardEvents(); // Initial attachment for potential static content or fallback

    });
  </script>
</body>
</html>